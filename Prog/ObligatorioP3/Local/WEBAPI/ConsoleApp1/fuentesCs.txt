***********************************
Archivo: ImpresionCodigoFuenteSolucion.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ConsoleApp1\ImpresionCodigoFuenteSolucion.cs
***********************************
using System.Text;
using System.IO;

namespace ImprimirCodigoFuente
{
    /// <summary>
    /// Para utilizar este código:
    /// 1. Agregar un proyecto aplicación de consola en la solución que tiene el código fuente a imprimir
    /// 2. Sustituir el código de la clase Program por este código 
    /// 3. Configurar el proyecto de consola como proyecto de inicio
    /// 4. Ejecutar la aplicación
    /// 5. En la misma carpeta de la clase Program quedarán los archivos de texto con el código fuente
    /// </summary>
    internal class ImpresionCodigoFuenteSolucion
    {
        /// <summary>
        /// Imprime los archivos de código con extensión .cs y las views .cshtml.
        /// Para agregar otro tipo de archivo simplemente invocar al método Imprimir
        /// indicando *.extensión
        /// </summary>
        /// <param name="args"></param>
        static void Main(string[] args)
        {
            Imprimir("*.cs", "fuentesCs.txt");
            Imprimir("*.cshtml", "views.txt");

        }
        /// <summary>
        /// Imprime los archivos de código fuente de la solución
        /// </summary>
        /// <param name="tipoArchivo">El nombre del archivo a imprimir.Para imprimir todos los de un tipo determinado usar "*.extensión" por ejemplo:  "*.cs"</param>
        /// <param name="nombreArchivoSalida">El nombre del archivo de texto donde quedarà el código fuente</param>
        /// <remarks>
        /// Este código funciona siempre que el archivo de la solución (.sln) esté en la raíz de la solución,
        /// es decir cuando todos los proyectos estàn en subcarpetas de la carpeta de la solución
        /// </remarks>
        private static void Imprimir(string tipoArchivo, string nombreArchivoSalida)
        {
            try
            {
                string raizSolucion = ObtenerRutaSolucion();
                var separador = "***********************************" + Environment.NewLine;

                var archivos = System.IO.Directory.GetFiles(raizSolucion, tipoArchivo, System.IO.SearchOption.AllDirectories);

                //se obtienen los archivos .cs excluyendo los que contienen código generado por el framework
                var resultado = archivos.Where(p => !p.Contains("Temporary")
                && !p.Contains("AssemblyInfo.cs")
                && !p.Contains("Program.cs")
                    && !p.Contains("AssemblyAttributes")
                    && !p.Contains(".g.cs"))
                    .Select(path => new { Carpeta = path, Nombre = System.IO.Path.GetFileName(path), Contenido = System.IO.File.ReadAllText(path) })
                                  .Select(info =>
                                      separador
                                    + "Archivo: " + info.Nombre + Environment.NewLine
                                    + "Carpeta: " + info.Carpeta + Environment.NewLine
                                    + separador
                                    + info.Contenido);


                var concatenado = string.Join(Environment.NewLine, resultado);
                File.WriteAllText(Path.GetDirectoryName(Path.GetDirectoryName(Path.GetDirectoryName(Directory.GetCurrentDirectory())))
                    + @$"\{nombreArchivoSalida}", concatenado, Encoding.UTF8);
            }
            catch (Exception algunError)
            {
                Console.WriteLine(algunError.Message);
            }
        }
        static string ObtenerRutaSolucion()
        {
            string directorioActivo = Directory.GetCurrentDirectory();

            Console.WriteLine("Directorio activo: " + directorioActivo);

            // Navega hacia arriba en la estructura de directorios hasta encontrar la carpeta de la solución
            DirectoryInfo directoryInfo = new DirectoryInfo(directorioActivo);

            while (directoryInfo != null && !DirectorioIncluye(directoryInfo, "*.sln"))
            {
                directoryInfo = directoryInfo.Parent;
            }

            if (directoryInfo != null)
            {
                return directoryInfo.FullName;
            }
            else
            {
                return string.Empty;
            }
        }

        static bool DirectorioIncluye(DirectoryInfo directory, string pattern)
        {
            return directory.GetFiles(pattern).Length > 0;
        }
    }
}


***********************************
Archivo: OblTests.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.Test\OblTests.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.Test
{
    internal class Program
    {
        static void Main(string[] args)
        {

        }
    }
}
***********************************
Archivo: ArticuloController.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3\Controllers\ArticuloController.cs
***********************************
using Microsoft.AspNetCore.Mvc;
using ObligatorioP3.AccesoDatos.EF;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Articulos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Articulos;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;

namespace ObligatorioP3.Web.Controllers
{
    public class ArticuloController : Controller
    {
        private IRepositorioArticulo _repoArticulos = new RepositorioArticuloEF(new ObligatorioP3Context());
        private IAltaArticulo _altaArticulo;
        private IGetAllArticulos _getAllArticulos;
        public ArticuloController()
        {
            _altaArticulo = new AltaArticulo(_repoArticulos);
            _getAllArticulos = new GetAllArticulos(_repoArticulos);
        }

        /// <summary>
        /// Retorna la vista del índice donde se listan los artículos
        /// </summary>
        /// <returns></returns>
        public IActionResult Index()
        {
            if (HttpContext.Session.GetString("Rol") != null)
            {
                try
                {
                    //El metodo getall en el repositorio los devuelve ordenados
                    var articulos = _getAllArticulos.Ejecutar();

                    if (articulos == null || articulos.Count() == 0)
                    {
                        ViewBag.Error = "No existen articulos";
                    }
                    ViewBag.Info = $"Hay {articulos.Count()} artículos registrados en total";
                    return View(articulos);
                }
                catch (Exception ex)
                {
                    ViewBag.Error = ex.Message;
                }
                return View();
            }
            else
            {
                ViewBag.Error = "DEBES LOGUEARTE";
                return RedirectToAction("Index", "Home");
            }
        }

        /// <summary>
        /// Retorna la vista de creación de artículo
        /// </summary>
        /// <returns></returns>
        public IActionResult Create()
        {
            if (HttpContext.Session.GetString("Rol") != null)
            {
                return View();
            }
            else
            {
                TempData["Mensaje"] = "DEBES LOGUEARTE";
                return RedirectToAction("Index", "Home");
            }
        }

        /// <summary>
        /// Este método es el que se llama para crear el artículo, se comunica con el caso de uso
        /// </summary>
        /// <param name="artDto"></param>
        /// <returns></returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(ArticuloAltaDto artDto)
        {
            try
            {
                _altaArticulo.Ejecutar(artDto);
                TempData["Mensaje"] = $"Artículo {artDto.Nombre} - {artDto.Codigo} creado correctamente";
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                ViewBag.Error = ex.Message;
                return View();
            }
        }
    }
}

***********************************
Archivo: ClienteController.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3\Controllers\ClienteController.cs
***********************************
using Microsoft.AspNetCore.Mvc;
using ObligatorioP3.AccesoDatos.EF;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Clientes;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Clientes;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;

namespace ObligatorioP3.Web.Controllers
{
    public class ClienteController : Controller
    {
        private IRepositorioCliente _repoClientes = new RepositorioClienteEF(new ObligatorioP3Context());
        private IFiltrarClientes _filtrarClientes;
        private IGetAllClientes _getAllClientes;
        
        
        public ClienteController()
        {
            _filtrarClientes = new FiltrarClientes(_repoClientes);
            _getAllClientes = new GetAllClientes(_repoClientes);
        }


        /// <summary>
        /// Lista de todos los clientes
        /// </summary>
        /// <returns></returns>
        public IActionResult Index()
        {
            if (HttpContext.Session.GetString("Rol") != null)
            {
                try
                {
                    var clientes = _getAllClientes.Ejecutar();
                    if (clientes == null || clientes.Count() == 0)
                    {
                        ViewBag.Mensaje = "No existen clientes / lista de clientes vacia";
                        return View();
                    }
                    ViewBag.Mensaje = $"Hay {clientes.Count()} en total";
                    return View(clientes);
                }
                catch (Exception ex)
                {
                    ViewBag.Error = ex.Message;
                    return View();
                }
            }
            else
            {
                TempData["Mensaje"] = "DEBES LOGUEARTE";
                return RedirectToAction("Index", "Home");
            }
        }

        /// <summary>
        /// Metodo post que captura los valores de busqueda ingresados
        /// </summary>
        /// <param name="txt">Texto a buscar en las razones sociales</param>
        /// <param name="money">Monto para filtrar la suma total de todos los pedidos del cliente</param>
        /// <returns>Vistas segun resultados</returns>
        [HttpPost]
        public IActionResult Index(string txt, string money)
        {
            IEnumerable<ClienteListarDto> clientesFiltrados = null;
            try
            {
                if(txt!=null && money != null)
                {
                    ViewBag.Error = "Solo utilizar un metodo para filtrar";
                    return RedirectToAction(nameof(Index));
                }
                if(txt==null && money == null)
                {
                    return RedirectToAction(nameof(Index));
                }
                if (txt != null) //Si el texto no es nulo, se ejecuta el caso de uso con el metodo filtrar texto
                {
                    clientesFiltrados = _filtrarClientes.FiltrarXTexto(txt);
                }
                if (money != null) //Si el money no es nulo, se ejecuta el mismo caso de uso con el metodo filtrar monto
                {
                    decimal numX = decimal.Parse(money);
                    clientesFiltrados = _filtrarClientes.FiltrarXMonto(numX);
                }
                if (clientesFiltrados == null || clientesFiltrados.Count() == 0)
                {
                    ViewBag.Mensaje = "No existen clientes con esas caracteristicas";
                    return View();
                }
                ViewBag.Mensaje = $"Hay {clientesFiltrados.Count()} en total";
                return View(clientesFiltrados);
            }
            catch (Exception ex)
            {
                ViewBag.Error = ex.Message;
                return View();
            }

        }
    }
}

***********************************
Archivo: HomeController.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3\Controllers\HomeController.cs
***********************************
using Microsoft.AspNetCore.Mvc;
using ObligatorioP3.Models;
using System.Diagnostics;

namespace ObligatorioP3.Controllers
{
    public class HomeController : Controller
    {
        private readonly ILogger<HomeController> _logger;

        public HomeController(ILogger<HomeController> logger)
        {
            _logger = logger;
        }

        public IActionResult Index()
        {
            return View();
        }

        public IActionResult Privacy()
        {
            return View();
        }

        [ResponseCache(Duration = 0, Location = ResponseCacheLocation.None, NoStore = true)]
        public IActionResult Error()
        {
            return View(new ErrorViewModel { RequestId = Activity.Current?.Id ?? HttpContext.TraceIdentifier });
        }
    }
}

***********************************
Archivo: PedidoController.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3\Controllers\PedidoController.cs
***********************************
using Humanizer;
using Libreria.AccesoDatos.EF;
using Libreria.LogicaNegocio.InterfacesRepositorios;
using Microsoft.AspNetCore.Mvc;
using ObligatorioP3.AccesoDatos.EF;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.ArticulosPedido;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Articulos;
using ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Clientes;
using ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Pedidos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Articulos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Clientes;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using ObligatorioP3.Web.Models.PedidosModels;

namespace ObligatorioP3.Web.Controllers
{
    public class PedidoController : Controller
    {
        private IRepositorioPedido _repoPedidos = new RepositorioPedidoEF(new ObligatorioP3Context());
        private IRepositorioParametro _repositorioParametro = new RepositorioParametroEF(new ObligatorioP3Context());
        private IAltaPedido _altaPedido;
        private IGetAllPedidos _getAllPedidos;
        private IGetAllPedidosAnulados _getAllPedidosAnulados;
        private IFiltrarPedidos _filtrarPedidos;
        private IGetPedido _getPedido;
        private IAnularPedido _anularPedido;

        private IRepositorioCliente _repoClientes = new RepositorioClienteEF(new ObligatorioP3Context());
        private IGetAllClientes _getAllClientes;
        private IGetCliente _getCliente;

        private IRepositorioArticulo _repoArticulos = new RepositorioArticuloEF(new ObligatorioP3Context());
        private IGetAllArticulos _getAllArticulos;
        private IGetArticulo _getArticulo;
        public PedidoController()
        {
            _altaPedido = new AltaPedido(_repoPedidos, _repositorioParametro);
            _getAllPedidos = new GetAllPedidos(_repoPedidos);
            _getAllPedidosAnulados = new GetAllPedidosAnulados(_repoPedidos);
            _filtrarPedidos = new FiltrarPedidos(_repoPedidos);
            _getPedido = new GetPedido(_repoPedidos);
            _anularPedido = new AnularPedido(_repoPedidos);

            _getAllClientes = new GetAllClientes(_repoClientes);
            _getCliente = new GetCliente(_repoClientes);

            _getAllArticulos = new GetAllArticulos(_repoArticulos);
            _getArticulo = new GetArticulo(_repoArticulos);
        }

        /// <summary>
        /// Retorna la visa del índice donde se listan todos los pedidos
        /// </summary>
        /// <returns></returns>
        public IActionResult Index()
        {
            if (HttpContext.Session.GetString("Rol") != null)
            {
                try
                {
                    HttpContext.Session.Remove("articulos");
                    var pedidos = _getAllPedidos.Ejecutar();

                    if (pedidos == null || pedidos.Count() == 0)
                    {
                        ViewBag.Error = "No existen pedidos";
                    }
                    ViewBag.Info = $"Hay {pedidos.Count()} pedidos registrados en total";
                    return View(pedidos);
                }
                catch (Exception ex)
                {
                    ViewBag.Error = ex.Message;
                }
                return View();
            }
            else
            {
                ViewBag.Error = "DEBES LOGUEARTE";
                return RedirectToAction("Index", "Home");
            }
        }

        /// <summary>
        /// Ejecuta el caso de uso que filtra los pedidos sin entregar por fecha de emisión y retorna la vista del índice con esos resultados
        /// </summary>
        /// <param name="date"></param>
        /// <returns></returns>
        [HttpPost]
        public IActionResult Index(DateTime? date)
        {
            IEnumerable<PedidoListarDto>? pedidosFiltrados = null;
            try
            {
                if (date == null)
                {
                    return RedirectToAction(nameof(Index));
                }
                if (date != null)
                {
                    pedidosFiltrados = _filtrarPedidos.Filtrar((DateTime)date);
                }
                if (pedidosFiltrados == null || pedidosFiltrados.Count() == 0)
                {
                    ViewBag.Mensaje = "No existen pedidos pendientes emitidos en esta fecha";
                    return View();
                }
                ViewBag.Mensaje = $"Hay {pedidosFiltrados.Count()} en total";
                return View(pedidosFiltrados);
            }
            catch (Exception ex)
            {
                ViewBag.Error = ex.Message;
                return View();
            }
        }

        /// <summary>
        /// Ejecuta el filtro de pedidos anulados y los retorna en la vista del índice
        /// </summary>
        /// <returns></returns>
        public IActionResult ListarAnulados()
        {
            if (HttpContext.Session.GetString("Rol") != null)
            {
                try
                {
                    var pedidosAnulados = _getAllPedidosAnulados.Ejecutar();

                    if (pedidosAnulados == null || pedidosAnulados.Count() == 0)
                    {
                        ViewBag.Error = "No existen pedidos anulados";
                    }
                    ViewBag.Info = $"Hay {pedidosAnulados.Count()} pedidos anulados en total";
                    return View("index", pedidosAnulados);
                }
                catch (Exception ex) 
                {
                    ViewBag.Error = ex.Message;
                    return View("index");
                }
            }
            else
            {
                TempData["Mensaje"] = "DEBES LOGUEARTE";
                return RedirectToAction("Index", "Home");
            }
        }

        /// <summary>
        /// Retorna la vista de creación del pedido
        /// </summary>
        /// <returns></returns>
        public IActionResult Create()
        {
            try
            {
                if (HttpContext.Session.GetString("Rol") != null)
                {
                    PedidoAltaModel model = new PedidoAltaModel();
                    model.clientes = _getAllClientes.Ejecutar();
                    model.articulos = _getAllArticulos.Ejecutar();
                    model.lineas = new List<ArticulosPedidoDto>();
                    string lineasString = HttpContext.Session.GetString("articulos");
                    if (lineasString != null)
                    {
                        String[] articulosCant = lineasString.Split("/");
                        foreach (string i in articulosCant)
                        {
                            if (i != "")
                            {
                                String[] lineaString = i.Split("-");
                                ArticuloListarDto articulo = _getArticulo.Ejecutar(Int32.Parse(lineaString[0]));
                                if (articulo.Id == Int32.Parse(lineaString[0]))
                                {
                                    ArticulosPedidoDto linea = new ArticulosPedidoDto();
                                    linea.ArticuloListarDto = articulo;
                                    linea.Unidades = Int32.Parse(lineaString[1]);
                                    linea.PrecioUnitario = articulo.Precio;
                                    model.lineas.Add(linea);
                                }
                            }
                        }
                    }

                    return View(model);
                }
                else
                {
                    TempData["Mensaje"] = "DEBES LOGUEARTE";
                    return RedirectToAction("Index", "Home");
                }
            }
            catch (Exception e)
            {
                TempData["Error"] = e.Message;
                return RedirectToAction("Index","Pedido");
            }
        }

        /// <summary>
        /// Maneja la generación de una variable de sesión que almacena los ids y cantidades de los artículos  que se agregan al pedido
        /// </summary>
        /// <param name="opcionSeleccionada"></param>
        /// <param name="cantidad"></param>
        /// <returns></returns>
        [HttpGet]
        public IActionResult Agregar(int opcionSeleccionada, int cantidad)
        {
            if (HttpContext.Session.GetString("Rol") != null)
            {
                if (HttpContext.Session.GetString("articulos") == null)
                {
                    HttpContext.Session.SetString("articulos", "");
                }
                if (cantidad <= 0)
                {
                    TempData["Error"] = "Debe seleccionar al menos 1 unidad";
                    return RedirectToAction("Create");
                }
                ArticuloListarDto articuloSeleccionado = null;
                var articulos = _getAllArticulos.Ejecutar();
                foreach (var articulo in articulos)
                {
                    if(articulo.Id == opcionSeleccionada)
                    {
                        articuloSeleccionado = articulo;
                        string lineas = HttpContext.Session.GetString("articulos");
                        if (!lineas.Contains($"{opcionSeleccionada}-"))
                        {
                            lineas += $"{opcionSeleccionada}-{cantidad}/";
                            HttpContext.Session.SetString("articulos", lineas);
                        }
                        else
                        {
                            TempData["Error"] = "Error, ese articulo ya ha sido agregado";
                            return RedirectToAction("Create");
                        }
                    }
                }

                TempData["Mensaje"] = $"Se agregaron {cantidad} unidades del artículo: {articuloSeleccionado.Nombre}";
                    return RedirectToAction("Create");
            }
            else
            {
                TempData["Mensaje"] = "DEBES LOGUEARTE";
                return RedirectToAction("Index", "Home");
            }
        }

        /// <summary>
        /// Limpia la variable de sesión y elimina todos los artículos agregados
        /// </summary>
        /// <returns></returns>
        public IActionResult limpiar()
        {
            HttpContext.Session.Remove("articulos");
            return RedirectToAction("Create");

        }

        /// <summary>
        /// Crea el dto Pedido para dar de alta. para esto desglosa la variable de sesión y recupera todos los artículos necesarios para armar las líneas
        /// </summary>
        /// <param name="tipoPedido"></param>
        /// <param name="fechaEntrega"></param>
        /// <param name="cliente"></param>
        /// <returns></returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(bool tipoPedido, DateTime fechaEntrega, int cliente)
        {
            if (HttpContext.Session.GetString("Rol") != null)
            {
                try
                {
                   PedidoAltaDto pedidoAltaDto = new PedidoAltaDto();
                    pedidoAltaDto.LineasDto = new List<ArticulosPedidoDto>();
                    pedidoAltaDto.FechaEntrega = fechaEntrega;
                    pedidoAltaDto.ClienteDto = _getCliente.Ejecutar(cliente);
                    string lineasString = HttpContext.Session.GetString("articulos");
                    if (lineasString != null)
                    {
                        String[] articulosCantSesion = lineasString.Split("/");
                        foreach (string i in articulosCantSesion)
                        {
                            if (i != "")
                            {
                                String[] lineaString = i.Split("-");
                                ArticuloListarDto articulo = _getArticulo.Ejecutar(Int32.Parse(lineaString[0]));
                                    if (articulo != null)
                                    {
                                        ArticulosPedidoDto linea = new ArticulosPedidoDto();
                                        linea.ArticuloListarDto = articulo;
                                        linea.Unidades = Int32.Parse(lineaString[1]);
                                        linea.PrecioUnitario = articulo.Precio;
                                        pedidoAltaDto.LineasDto.Add(linea);
                                    }
                            }
                        }
                    }
                    else
                    {
                        TempData["Error"] = "El pedido no puede ir vacío";
                        return RedirectToAction("Create");
                    }
                    _altaPedido.Ejecutar(pedidoAltaDto, tipoPedido);
                    TempData["Mensaje"] = "El pedido ha sido creado correctamente";
                    return RedirectToAction("Index");
                }
                catch (Exception ex)
                {
                    TempData["Error"] = ex.Message;
                    return RedirectToAction("Create");
                }
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }
        }

        /// <summary>
        /// Retorna la vista que muestra los detalles del pedido que se va a anular
        /// </summary>
        /// <param name="id"></param>
        /// <returns></returns>
            public IActionResult Delete(int? id)
        {
            if (HttpContext.Session.GetString("Rol") != null)
            {
                try
                {
                    PedidoListarDto dto = _getPedido.GetById(id.GetValueOrDefault());
                    if (dto != null) return View(dto);
                    ViewBag.Mensaje = $"No existe un pedido con el id {id}";
                    return View();
                }
                catch (Exception ex)
                {
                    ViewBag.Error = ex.Message;
                    return View();
                }
            }
            else
            {
                return RedirectToAction("Index", "Home");
            }

        }

        /// <summary>
        /// Llama al caso de uso que anula un pedido. (No lo borra, es una baja lógica se podría decir)
        /// </summary>
        /// <param name="id"></param>
        /// <param name="dto"></param>
        /// <returns></returns>
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Delete(int? id, PedidoListarDto dto)
        {
            try
            {
                ViewBag.Mensaje = $"Pedido {dto.Id} eliminado correctamente";
                _anularPedido.Ejecutar(id.GetValueOrDefault());
                return RedirectToAction("Index", "Pedido");
            }
            catch (Exception ex)
            {
                ViewBag.Error = $"Ha ocurrido un error al eliminar el pedido: {dto.Id}: " + ex.Message;
                return View();
            }
        }
    }
}

***********************************
Archivo: UsuarioController.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3\Controllers\UsuarioController.cs
***********************************
using Microsoft.AspNetCore.Mvc;
using ObligatorioP3.AccesoDatos.EF;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Usuarios;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using ObligatorioP3.Web.Models.UsuariosModels;

namespace ObligatorioP3.Web.Controllers
{
    public class UsuarioController : Controller
    {
        private IRepositorioUsuario _repoUsuarios = new RepositorioUsuarioEF(new ObligatorioP3Context());
        private IAltaUsuario _altaUsuario;
        private IEliminarUsuario _eliminarUsuario;
        private IModificarUsuario _modificarUsuario;
        private ILoginUsuario _loginUsuario;
        private IGetAllUsuarios _getAllUsuarios;
        private IGetUsuario _getUsuario;
        public UsuarioController()
        {
            _altaUsuario = new AltaUsuario(_repoUsuarios);
            _eliminarUsuario = new EliminarUsuario(_repoUsuarios);
            _modificarUsuario = new ModificarUsuario(_repoUsuarios);
            _loginUsuario = new LoginUsuario(_repoUsuarios);
            _getAllUsuarios = new GetAllUsuarios(_repoUsuarios);
            _getUsuario = new GetUsuario(_repoUsuarios);
        }
        /// <summary>
        /// Lista de usuarios
        /// </summary>
        /// <returns></returns>
        public IActionResult Index()
        {
            if (HttpContext.Session.GetString("Rol") != null)
            {
                try
                {
                    var usuarios = _getAllUsuarios.Ejecutar();

                    if (usuarios == null || usuarios.Count() == 0)
                    {
                        ViewBag.Error = "No existen usuarios";
                    }
                    ViewBag.Info = $"Hay {usuarios.Count()} usuarios registrados en total";
                    return View(usuarios);
                }
                catch (Exception ex)
                {
                    ViewBag.Error = ex.Message;
                }
                return View();
            }
            else
            {
                ViewBag.Error = "DEBES LOGUEARTE";
                return RedirectToAction("Index","Home");
            }
           
        }
        /// <summary>
        /// Devuelve la vista del login
        /// </summary>
        /// <returns></returns>
        public IActionResult Login()
        {
            if (HttpContext.Session.GetString("Rol") == null)
            {
                return View();
            }
            else
            {
                ViewBag.Error = "Ya hay un usuario logueado";
                return RedirectToAction("Index","Home");
            }
        }
        /// <summary>
        /// Se busca un usuario en el sistema mediante los datos del usuarioLogin
        /// </summary>
        /// <param name="usuarioLogin">Es un model de la vista de login que contiene un Email y una Contraseña</param>
        /// <returns></returns>
        [HttpPost]
        public IActionResult Login(UsuarioLoginModel usuarioLogin)
        {

            Usuario? usu = _loginUsuario.Ejecutar(usuarioLogin.Email, usuarioLogin.Contrasena);
            if (usu != null)
            {
                HttpContext.Session.SetString("Rol", "admin");
                HttpContext.Session.SetString("Email", usu.Email.ValorEmail);
                HttpContext.Session.SetInt32("Id",usu.Id);
                TempData["Info"] = $"Bienvenid@ {usu.NombreCompleto.Nombre + " " + usu.NombreCompleto.Apellido}, has iniciado sesion correctamente";
                return RedirectToAction("Index");
            }
            else
            {
                TempData["Error"] = "ERROR AL INICAR SESION";
                return RedirectToAction("Index","Home");
            }
            
        }

        public IActionResult Logout()
        {
            HttpContext.Session.Clear();
            return RedirectToAction("Login","Usuario");
        }

        public IActionResult Create()
        {
            if (HttpContext.Session.GetString("Rol") != null)
            {
                return View();
            }
            else
            {
                TempData["Mensaje"] = "DEBES LOGUEARTE";
                return RedirectToAction("Index", "Home");
            }
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public IActionResult Create(UsuarioAltaDto usuDto)
        {
            try
            {
                _altaUsuario.Ejecutar(usuDto);
                TempData["Mensaje"] = $"Usuario {usuDto.Nombre} {usuDto.Apellido} creado correctamente";
                return RedirectToAction("Index");
            }
            catch (Exception ex)
            {
                ViewBag.Error = ex.Message;
                return View();
            }
        }

        public IActionResult Edit(int? id)
        {
            if (HttpContext.Session.GetString("Rol") != null)
            {
                if (id == null)
                {
                    ViewBag.Error = "Se requiere el id del autor";
                    return RedirectToAction("Index", "Home");
                }
                else
                    try
                    {
                        UsuarioListarDto dto = _getUsuario.GetById(id);
                        UsuarioModificacionDto mod = new UsuarioModificacionDto()
                        {
                            Id = dto.Id,
                            Nombre = dto.Nombre,
                            Apellido = dto.Apellido,
                            Email = dto.Email,
                            Contrasena = dto.Contrasena,
                            ContrasenaEncriptada = dto.ContrasenaEncriptada,
                            Rol = dto.Rol
                        };
                        if (dto != null)
                        {
                            return View(mod);
                        }
                    }
                    catch (Exception ex)
                    {
                        ViewBag.Error = ex.Message;
                    }
                return View();
            }
            else
            {
                ViewBag.Mensaje = "DEBES LOGUEARTE";
                return RedirectToAction("Index","Home");
            }
           
        }
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit(int id, UsuarioModificacionDto usuDto)
        {
            try
            {
                _modificarUsuario.Ejecutar(id, usuDto);
                return RedirectToAction("Index","Usuario");
            }
            catch (Exception ex)
            {
                ViewBag.Error = ex.Message;
                return View(usuDto);
            }
        }

        public IActionResult Delete(int? id)
        {
            if (HttpContext.Session.GetString("Rol") != null)
            {
                try
                {
                    UsuarioListarDto dto = _getUsuario.GetById(id.GetValueOrDefault());
                    if (dto != null) return View(dto);
                    ViewBag.Mensaje = $"No existen usuarios con el id {id}";
                    return View();
                }
                catch (Exception ex)
                {
                    ViewBag.Error = ex.Message;
                    return View();
                }
            }
            else
            {
                ViewBag.Mensaje = "DEBES LOGUEARTE";
                return RedirectToAction("Index", "Home");
            }
            
        }

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Delete(int? id, UsuarioListarDto dto)
        {
            try
            {
                ViewBag.Mensaje = $"Usuario {dto.Email} eliminado correctamente";
                _eliminarUsuario.Ejecutar(id.GetValueOrDefault());
                return RedirectToAction("Index","Usuario");
            }
            catch (Exception ex)
            {
                ViewBag.Error = $"Ha ocurrido un error al eliminar al usuario: {dto.Email}: "+ex.Message;
                return View();
            }
        }
    }
}

***********************************
Archivo: ErrorViewModel.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3\Models\ErrorViewModel.cs
***********************************
namespace ObligatorioP3.Models
{
    public class ErrorViewModel
    {
        public string? RequestId { get; set; }

        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
    }
}

***********************************
Archivo: ObligatorioP3Context.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\EF\ObligatorioP3Context.cs
***********************************
using Libreria.LogicaNegocio.Entidades.ParametrosConfigurables;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.Entidades.AssosiationClasses;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.Entidades.ValueObjects.Comun;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.AccesoDatos.EF
{
    public class ObligatorioP3Context:DbContext
    {
        public DbSet<Articulo> Articulos { get; set; }
        public DbSet<Cliente> Clientes { get; set; }
        public DbSet<Usuario> Usuarios { get; set; }
        public DbSet<Pedido> Pedidos { get; set; }
        public DbSet<PedidoComun> PedidosComunes { get; set; }
        public DbSet<PedidoExpress> PedidosExpress { get; set; }
        public DbSet<Parametro> Parametros { get; set; }
        public DbSet<TipoDeMovimiento>TiposDeMovimiento { get; set; }
        public DbSet<MovimientoStock> MovimientosDeStock { get; set; }

        public ObligatorioP3Context() { }
        public ObligatorioP3Context(DbContextOptions<ObligatorioP3Context> options) : base(options) { }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.Entity<Pedido>().OwnsMany(pedido => pedido.Lineas);

            #region ConfiguracionUsuarios
            //Convertimos el Email para que pueda ser un indice y unique
            var emailConverter = new ValueConverter<Email,string>(e => e.ValorEmail, e=> new Email(e));
            modelBuilder.Entity<Usuario>().Property(e => e.Email).HasConversion(emailConverter);
            modelBuilder.Entity<Usuario>().HasIndex(d => d.Email).IsUnique();
            #endregion

            #region ConfiguracionArticulos
            //Colocamos como indice y unique codigo y nombre de cada articulo
            modelBuilder.Entity<Articulo>().HasIndex(d => d.Codigo).IsUnique();
            modelBuilder.Entity<Articulo>().HasIndex(d => d.Nombre).IsUnique();
            #endregion

            #region ConfiguracionClientes
            modelBuilder.Entity<Cliente>().HasIndex(d => d.RUT).IsUnique();
            #endregion
        }
    }
}

***********************************
Archivo: RepositorioArticuloEF.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\EF\RepositorioArticuloEF.cs
***********************************
using Microsoft.EntityFrameworkCore;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.Excepciones.Articulo;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.AccesoDatos.EF
{
    public class RepositorioArticuloEF : IRepositorioArticulo
    {
        #region Propiedades y constructor
        private static int cantArticulos = 0;
        private ObligatorioP3Context _db { get; set; }

        public RepositorioArticuloEF(ObligatorioP3Context db)
        {
            _db = db;
        }
        #endregion

        /// <summary>
        /// Agrega el artículo a la base de datos
        /// </summary>
        /// <param name="art">Entidad Articulo</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArticuloNoValidoException"></exception>
        public void Add(Articulo art)
        {
            art.EsValido();
            if (art == null)
            {
                throw new ArgumentNullException("Error, artículo nulo para cargar a la BD");
            }
            try
            {
                _db.Articulos.Add(art);
                _db.SaveChanges();
            }
            catch (DbUpdateException ex)
            {

                throw new ArticuloNoValidoException($"Error interno. Envie a su programador: {ex.InnerException.Message}");
            }
            catch (Exception ex)
            {

                throw new ArticuloNoValidoException($"El artículo no se pudo agregar, más info: {ex.Message}");
            }
        }

        /// <summary>
        /// Recupera todos los artículos de la base de datos
        /// </summary>
        /// <returns>IEnumerable de entidades articulos</returns>
        public IEnumerable<Articulo> GetAll()
        {
            try
            {
                return _db.Articulos.ToList().OrderBy(a => a.Nombre);
            }
            catch (Exception e)
            {

                throw e;
            }
        }

        /// <summary>
        /// Recupera un artículo de la base de datos cuyo id coincida con el id parámetro
        /// </summary>
        /// <param name="id">Id del artículo</param>
        /// <returns>Entidad Artículo</returns>
        public Articulo GetById(int? id)
        {
            return _db.Articulos.Find(id);
        }

        public void Remove(int id)
        {
            throw new NotImplementedException();
        }

        public void Remove(Articulo obj)
        {
            throw new NotImplementedException();
        }

        public void Update(int id, Articulo obj)
        {
            throw new NotImplementedException();
        }
        
        public IEnumerable<Articulo?> GetArticulosConMovimientosSegunFechas(DateTime fecha1, DateTime fecha2, int pagina, int cantidadRegistros)
        {
            try
            {
                if (pagina <= 1)
                    cantArticulos = _db.Articulos.Count();
                int numRegistrosAnteriores = 0;
                if (pagina > 1)
                {
                    numRegistrosAnteriores = cantidadRegistros * (pagina - 1);
                }
                return _db.MovimientosDeStock.Include(m => m.Articulo)
                                             .Where(m => m.Fecha > fecha1 && m.Fecha < fecha2)
                                             .Select(m => m.Articulo)
                                             .Distinct()
                                             .Skip(numRegistrosAnteriores)
                                             .Take(cantidadRegistros)
                                             .ToList();
            }
            catch
            {
                throw;
            }
        }
    }
}

***********************************
Archivo: RepositorioClienteEF.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\EF\RepositorioClienteEF.cs
***********************************
using Microsoft.EntityFrameworkCore;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.AccesoDatos.EF
{
    public class RepositorioClienteEF : IRepositorioCliente
    {
        #region Propiedades y constructor
        private ObligatorioP3Context _db { get; set; }

        public RepositorioClienteEF(ObligatorioP3Context db)
        {
            _db = db;
        }
        #endregion
        public void Add(Cliente obj)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Cliente> GetAll()
        {
            try
            {
                return _db.Clientes.ToList();
            }
            catch (Exception e)
            {

                throw e;
            }
        }

        public Cliente GetById(int? id)
        {
            return _db.Clientes.Find(id);
        }

        public void Remove(int id)
        {
            throw new NotImplementedException();
        }

        public void Remove(Cliente obj)
        {
            throw new NotImplementedException();
        }

        public void Update(int id, Cliente obj)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Cliente> FiltrarXTexto(string txt)
        {
            var clientes = _db.Clientes
            .Where(cli => cli.RazonSocial.Contains(txt));
            return clientes;
        }

        public IEnumerable<Cliente> FiltrarXMonto(decimal money)
        {
            var clientes = _db.Pedidos
                      .GroupBy(pedido => new Cliente (pedido.Cliente.Id, pedido.Cliente.RazonSocial, pedido.Cliente.RUT, pedido.Cliente.Direccion.Calle,pedido.Cliente.Direccion.Ciudad,pedido.Cliente.Direccion.Numero,pedido.Cliente.Direccion.Distancia)) // Agrupamos los pedidos por cliente
                      .Where(grupo => grupo.Sum(pedido => pedido.PrecioFinal) > money) // Filtramos los grupos cuya suma de precios finales sea mayor a money
                      .Select(grupo => grupo.Key) // Seleccionamos los clientes de los grupos filtrados
                      .ToList();
            return clientes;
        }
    }
}

***********************************
Archivo: RepositorioMovimientoEF.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\EF\RepositorioMovimientoEF.cs
***********************************
using Microsoft.EntityFrameworkCore;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.AccesoDatos.EF
{
    public class RepositorioMovimientoEF : IRepositorioMovimiento
    {
        #region Propiedades y constructor
        private ObligatorioP3Context _db { get; set; }
        private static int cantMovimientos = 0;

        public RepositorioMovimientoEF(ObligatorioP3Context db)
        {
            _db = db;
        }
        #endregion

        public int ObtenerStockActual(int idArticulo)
        {
            int stock = 0;
            stock = _db.MovimientosDeStock.Include(m => m.Tipo).Where(m => m.Articulo.Id == idArticulo).Sum(m => m.Cantidad * m.Tipo.Coeficiente);
            return stock;
        }

        public void Add(MovimientoStock obj)
        {
            obj.EsValido();
            if (obj == null) throw new ArgumentNullException("Error, movimiento nulo para cargar a la BD");
            int stockActual = ObtenerStockActual(obj.Articulo.Id);
            int cantidadMovida = obj.Cantidad * obj.Tipo.Coeficiente;
            if (cantidadMovida < 0)
            {
                if (stockActual + cantidadMovida < 0)
                    throw new Exception("Egreso excede stock");
            }
            try
            {
                _db.MovimientosDeStock.Add(obj);
                _db.Entry(obj.Articulo).State = EntityState.Unchanged;
                _db.Entry(obj.Usuario).State = EntityState.Unchanged;
                _db.Entry(obj.Tipo).State = EntityState.Unchanged;
                _db.SaveChanges();
            }
            catch (DbUpdateException ex)
            {

                throw new Exception($"Error interno. Envie a su programador: {ex.InnerException.Message}");
            }
            catch (Exception ex)
            {
                throw new Exception($"El movimiento no se pudo agregar, más info: {ex.Message}");
            }
        }

        public IEnumerable<object> GetGrouped()
        {
            try
            {
                var resultados = _db.MovimientosDeStock
                                        .GroupBy(m => m.Fecha.Year)
                                        .Select(g => new
                                        {
                                            Ano = g.Key.ToString(),
                                            MovimientoCantidad = g
                                                .GroupBy(m => m.Tipo.Nombre)
                                                .Select(tg => new
                                                {
                                                    Nombre = tg.Key,
                                                    Cantidad = tg.Count()
                                                })
                                                .ToList(),
                                            Total = g.Count()
                                        })
                                        .ToList();
                return resultados;
            } catch (Exception ex)
            {
                throw;
            }
        }

        public IEnumerable<MovimientoStock> Filtrar(int idArticulo, int idTipo, int numPagina, int cantidadRegistros)
        {
            try
            {
                if (numPagina <= 1)
                cantMovimientos = _db.MovimientosDeStock.Count();
                int numRegistrosAnteriores = 0;
                if (numPagina > 1)
                {
                    numRegistrosAnteriores = cantidadRegistros * (numPagina - 1);
                }
                var movimientos = _db.MovimientosDeStock.AsNoTracking()
                                            .Include(m => m.Articulo)
                                            .Include(m => m.Tipo)
                                            .Include(m=>m.Usuario)
                                            .Where(m => m.IdArticulo == idArticulo && m.IdTipo == idTipo)
                                            .OrderByDescending(m => m.Fecha)
                                            .ThenBy(m => m.Cantidad)
                                            .Skip(numRegistrosAnteriores)
                                            .Take(cantidadRegistros)
                                            .ToList();
                if (!movimientos.Any())
                    cantMovimientos = 0;
                return movimientos;
            }
            catch (Exception ex)
            {
                throw;
            }
        }
    }
}

***********************************
Archivo: RepositorioParametroEF.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\EF\RepositorioParametroEF.cs
***********************************
using Libreria.LogicaNegocio.Entidades.ParametrosConfigurables;
using Libreria.LogicaNegocio.InterfacesRepositorios;
using ObligatorioP3.AccesoDatos.EF;

namespace Libreria.AccesoDatos.EF
{
    public class RepositorioParametroEF : IRepositorioParametro
    {
        private ObligatorioP3Context _db { get; set; }
        public RepositorioParametroEF(ObligatorioP3Context db)
        {
            _db = db;
        }

        /// <summary>
        /// Recupera el parámetro solicitado por nombre
        /// </summary>
        /// <param name="nombre">Nombre del parámetro</param>
        /// <returns>Entidad Parámetro</returns>
        public Parametro? GetParametro(string nombre)
        {
            try
            {
                Parametro? parametro = _db.Parametros
                .SingleOrDefault(parametro => parametro.Nombre.Equals(nombre));
                return parametro;
            }
            catch (Exception ex)
            {
                throw;
            }
        }

        public Parametro GetById(int? id)
        {
            throw new NotImplementedException();
        }

        public void Add(Parametro obj)
        {
            throw new NotImplementedException();
        }

        public void Update(int id, Parametro obj)
        {
            throw new NotImplementedException();
        }

        public void Remove(int id)
        {
            throw new NotImplementedException();
        }

        public void Remove(Parametro obj)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Parametro> GetAll()
        {
            throw new NotImplementedException();
        }
    }

    }
 
***********************************
Archivo: RepositorioPedidoEF.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\EF\RepositorioPedidoEF.cs
***********************************
using Microsoft.EntityFrameworkCore;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.Excepciones.Articulo;
using ObligatorioP3.LogicaNegocio.Excepciones.Usuario;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace ObligatorioP3.AccesoDatos.EF
{
    public class RepositorioPedidoEF : IRepositorioPedido
    {
        #region Propiedades y constructor
        private ObligatorioP3Context _db { get; set; }

        public RepositorioPedidoEF(ObligatorioP3Context db)
        {
            _db = db;
        }
        #endregion

        /// <summary>
        /// Agrega un nuevo pedido en la base de datos
        /// </summary>
        /// <param name="obj">Entidad Pedido</param>
        public void Add(Pedido obj)
        {
            obj.EsValido();
            if (obj == null)
            {
                throw new ArgumentNullException("Error, pedido nulo para cargar a la BD");
            }
            try
            {
                _db.Pedidos.Add(obj);
                if(obj.Lineas.Count > 0)
                {
                    foreach (var item in obj.Lineas)
                    {
                        _db.Entry(item.Articulo).State = EntityState.Unchanged;
                    }
                }
                _db.Entry(obj.Cliente).State = EntityState.Unchanged;
                _db.SaveChanges();
            }
            catch (DbUpdateException ex)
            {

                throw new Exception($"Error interno. Envie a su programador: {ex.InnerException.Message}");
            }
            catch (Exception ex)
            {

                throw new Exception($"El pedido no se pudo agregar, más info: {ex.Message}");
            }
        }

        /// <summary>
        /// Recupera todos los pedidos de la base de datos
        /// </summary>
        /// <returns>IEnumerable de entidades pedido</returns>
        public IEnumerable<Pedido> GetAll()
        {
            try
            {
                return _db.Pedidos.AsNoTracking()
                                    .Include(p => p.Lineas)
                                        .ThenInclude(l => l.Articulo)
                                    .Include(p => p.Cliente)
                                    .ToList();
            }
            catch (Exception e)
            {

                throw e;
            }
        }

        /// <summary>
        /// Recupera todos los pedidos anulados de la base de datos
        /// </summary>
        /// <returns>IEnumerable de entidades pedido</returns>
        public IEnumerable<Pedido> GetAllAnulados()
        {
            try
            {
                return _db.Pedidos.AsNoTracking()
                                    .Include(p => p.Lineas)
                                        .ThenInclude(l => l.Articulo)
                                    .Include(p => p.Cliente)
                                    .Where(p => p.Anulado.Equals(true))
                                    .ToList().OrderByDescending(p=>p.Fecha);
            }
            catch (Exception e)
            {

                throw e;
            }
        }

        /// <summary>
        /// Recupera los pedidos filtrando por fecha de emisión y que no hayan sido entregados aún
        /// </summary>
        /// <param name="date">Fecha de emisión</param>
        /// <returns>IEnumerable de Entidades pedido</returns>
        public IEnumerable<Pedido> Filtrar(DateTime date)
        {
            try
            {
                return _db.Pedidos.AsNoTracking()
                                    .Include(p => p.Lineas)
                                        .ThenInclude(l => l.Articulo)
                                    .Include(p => p.Cliente)
                                    .Where(p => p.Fecha.Date.Equals(date.Date) && p.FechaEntrega.Date > DateTime.Now.Date)
                                    .ToList();
            }
            catch (Exception e)
            {
                throw e;
            }
        }

        /// <summary>
        /// Recupera un pedido específico usando el ID para encontrarlo
        /// </summary>
        /// <param name="id">Id del pedido que se quiere obtener</param>
        /// <returns>Entidad Pedido</returns>
        public Pedido? GetById(int? id)
        {
            try
            {
                return _db.Pedidos.AsNoTracking()
                                    .Include(p => p.Lineas)
                                        .ThenInclude(l => l.Articulo)
                                    .Include(p => p.Cliente)
                                    .FirstOrDefault(p => p.Id == id);
            }
            catch (Exception e) 
            { 
                throw e; 
            }
        }

        /// <summary>
        /// Recupera un pedido de la base de datos y coloca su valor "anulado" como "true"
        /// </summary>
        /// <param name="id">Id del pedido que se quiere anular</param>
        public void Anular(int id)
        {
            try
            {
                Pedido? pedidoParaAnular = _db.Pedidos.Include(p => p.Lineas)
                                                            .ThenInclude(l => l.Articulo)
                                                        .Include(p => p.Cliente)
                                                        .FirstOrDefault(p => p.Id == id);

                if(pedidoParaAnular != null)
                {
                    pedidoParaAnular.AnularPedido();
                }
                _db.SaveChanges();
            }
            catch (Exception e) 
            { 
                throw e; 
            }
        }

        public void Remove(int id)
        {

        }

        public void Remove(Pedido obj)
        {
            throw new NotImplementedException();
        }

        public void Update(int id, Pedido obj)
        {
            throw new NotImplementedException();
        }

    }
}

***********************************
Archivo: RepositorioTipoDeMovimientoEF.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\EF\RepositorioTipoDeMovimientoEF.cs
***********************************
using Microsoft.EntityFrameworkCore;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.Excepciones.TipoDeMovimiento;
using ObligatorioP3.LogicaNegocio.Excepciones.Usuario;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.AccesoDatos.EF
{
    public class RepositorioTipoDeMovimientoEF : IRepositorioTipoDeMovimientoEF
    {
        private ObligatorioP3Context _db;

        public RepositorioTipoDeMovimientoEF(ObligatorioP3Context db)
        {
            _db = db;
        }

        public void Add(TipoDeMovimiento obj)
        {
            obj.EsValido();
            if (obj == null)
            {
                throw new ArgumentNullException("Error, autor nulo para cargar a la BD");
            }
            try
            {
                _db.TiposDeMovimiento.Add(obj);
                _db.SaveChanges();
            }
            catch (DbUpdateException ex)
            {

                throw new TipoDeMovimientoNoValidoException($"Error interno. Envie a su programador: {ex.InnerException.Message}");
            }
            catch (Exception ex)
            {

                throw new TipoDeMovimientoNoValidoException($"El tipo de movimiento no se pudo agregar, más info: {ex.Message}");
            }
        }

        public IEnumerable<TipoDeMovimiento> GetAll()
        {
            try
            {
                return _db.TiposDeMovimiento.ToList();
            }
            catch (Exception e)
            {

                throw e;
            }
        }

        public TipoDeMovimiento GetById(int? id)
        {
            try
            {
                return _db.TiposDeMovimiento.Find(id);
            }
            catch (Exception e)
            {

                throw e;
            }
        }

        public void Remove(int id)
        {
            try
            {
                var tipoABorrar = _db.TiposDeMovimiento.Find(id);
                if (tipoABorrar == null) throw new TipoDeMovimientoNoValidoException($"El tipo con id {id} NO EXISTE");
                if (TipoDeMovimientoEnUso(tipoABorrar)) throw new TipoDeMovimientoNoValidoException($"El tipo con id {id} está en uso y no puede ser borrado");
                _db.TiposDeMovimiento.Remove(tipoABorrar);
                _db.SaveChanges();
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }

        public bool TipoDeMovimientoEnUso(TipoDeMovimiento tipo) { 
            return _db.MovimientosDeStock.Include(movimiento => movimiento.Tipo)
                                         .Where(movimiento=>movimiento.Tipo.Nombre.Equals(tipo.Nombre))
                                         .Any();
        }

        public void Remove(TipoDeMovimiento obj)
        {
            try
            {

                if (obj == null) throw new ArgumentNullException();
                _db.TiposDeMovimiento.Remove(obj);
                _db.SaveChanges();
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public void Update(int id, TipoDeMovimiento obj)
        {
            try
            {
                var tipoAUpdatear = _db.TiposDeMovimiento.Find(id);
                if (tipoAUpdatear == null)
                    throw new TipoDeMovimientoNoValidoException($"No existe el tipo con el id {id}");
                tipoAUpdatear.ModificarDatos(obj);
                _db.SaveChanges();
            }
            catch (Exception ex)
            {

                throw;
            }
        }
    }
}

***********************************
Archivo: RepositorioUsuarioEF.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\EF\RepositorioUsuarioEF.cs
***********************************
using Microsoft.EntityFrameworkCore;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.Entidades.ValueObjects.Comun;
using ObligatorioP3.LogicaNegocio.Excepciones.Usuario;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.AccesoDatos.EF
{
    public class RepositorioUsuarioEF : IRepositorioUsuario
    {
        #region Propiedades y constructor
        private ObligatorioP3Context _db { get; set; }

        public RepositorioUsuarioEF(ObligatorioP3Context db)
        {
            _db = db;
        }
        #endregion
        public void Add(Usuario obj)
        {
            obj.EsValido();
            if (obj == null)
            {
                throw new ArgumentNullException("Error, autor nulo para cargar a la BD");
            }
            try
            {
                _db.Usuarios.Add(obj);
                _db.SaveChanges();
            }
            catch (DbUpdateException ex)
            {

                throw new UsuarioNoValidoException($"Error interno. Envie a su programador: {ex.InnerException.Message}");
            }
            catch (Exception ex)
            {

                throw new UsuarioNoValidoException($"El usuario no se pudo agregar, más info: {ex.Message}");
            }
        }

        public IEnumerable<Usuario> GetAll()
        {
            try
            {
                return _db.Usuarios.ToList();
            }
            catch (Exception e)
            {

                throw e;
            }
        }

        public Usuario GetById(int? id)
        {
            try
            {
                return _db.Usuarios.Find(id);
            }
            catch (Exception e)
            {

                throw e;
            }
        }
        
        public void Remove(int id)
        {
            try
            {
                var usuarioABorrar = _db.Usuarios.Find(id);
                if (usuarioABorrar == null) throw new UsuarioNoValidoException($"El usuario con id {id} NO EXISTE");
                _db.Usuarios.Remove(usuarioABorrar);
                _db.SaveChanges();
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }

        public void Remove(Usuario obj)
        {
            try
            {

                if (obj == null) throw new ArgumentNullException();
                _db.Usuarios.Remove(obj);
                _db.SaveChanges();
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public void Update(int id, Usuario obj)
        {
            try
            {
                var usuarioAUpdatear = _db.Usuarios.Find(id);
                if (usuarioAUpdatear == null)
                    throw new UsuarioNoValidoException($"No existe el usuario con el id {id}");
                usuarioAUpdatear.ModificarDatos(obj);
                _db.SaveChanges();
            }
            catch (Exception ex)
            {

                throw;
            }
        }
        
        public Usuario GetByEmail(string email)
        {
            try
            {
                //El new al email sustituye el utilizar "asEnumerable()"
                Usuario x = _db.Usuarios.AsEnumerable().FirstOrDefault(u => u.Email.ValorEmail == email);
                return x;
            }
            catch (Exception ex)
            {

                throw ex;
            }
           
        }


    }
}

***********************************
Archivo: RepositorioArticuloMemoria.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\Memoria\RepositorioArticuloMemoria.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.AccesoDatos.Memoria
{
    public class RepositorioArticuloMemoria : IRepositorioArticulo
    {
        public void Add(Articulo obj)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Articulo> GetAll()
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Articulo?> GetArticulosConMovimientosSegunFechas(DateOnly fecha1, DateOnly fecha2)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Articulo?> GetArticulosConMovimientosSegunFechas(DateTime fecha1, DateTime fecha2)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Articulo?> GetArticulosConMovimientosSegunFechas(DateTime fecha1, DateTime fecha2, int pagina, int cantidadRegistros)
        {
            throw new NotImplementedException();
        }

        public Articulo GetById(int? id)
        {
            throw new NotImplementedException();
        }

        public void Remove(int id)
        {
            throw new NotImplementedException();
        }

        public void Remove(Articulo obj)
        {
            throw new NotImplementedException();
        }

        public void Update(int id, Articulo obj)
        {
            throw new NotImplementedException();
        }
    }
}

***********************************
Archivo: RepositorioClienteMemoria.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\Memoria\RepositorioClienteMemoria.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.AccesoDatos.Memoria
{
    public class RepositorioClienteMemoria : IRepositorioCliente
    {
        public void Add(Cliente obj)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Cliente> FiltrarXMonto(decimal money)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Cliente> FiltrarXTexto(string txt)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Cliente> GetAll()
        {
            throw new NotImplementedException();
        }

        public Cliente GetById(int? id)
        {
            throw new NotImplementedException();
        }

        public void Remove(int id)
        {
            throw new NotImplementedException();
        }

        public void Remove(Cliente obj)
        {
            throw new NotImplementedException();
        }

        public void Update(int id, Cliente obj)
        {
            throw new NotImplementedException();
        }
    }
}

***********************************
Archivo: RepositorioPedidoMemoria.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\Memoria\RepositorioPedidoMemoria.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.AccesoDatos.Memoria
{
    public class RepositorioPedidoMemoria : IRepositorioPedido
    {
        public void Add(Pedido obj)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Pedido> GetAll()
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Pedido> GetAllAnulados()
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Pedido> Filtrar(DateTime date)
        {
            throw new NotImplementedException();
        }

        public Pedido GetById(int? id)
        {
            throw new NotImplementedException();
        }

        public void Anular(int id)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Cliente> ObtenerClientesXMonto(double money)
        {
            throw new NotImplementedException();
        }

        public void Remove(int id)
        {
            throw new NotImplementedException();
        }

        public void Remove(Pedido obj)
        {
            throw new NotImplementedException();
        }

        public void Update(int id, Pedido obj)
        {
            throw new NotImplementedException();
        }
    }
}

***********************************
Archivo: RepositorioUsuarioMemoria.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\Memoria\RepositorioUsuarioMemoria.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.AccesoDatos.Memoria
{
    public class RepositorioUsuarioMemoria : IRepositorioUsuario
    {
        public void Add(Usuario obj)
        {
            throw new NotImplementedException();
        }

        public IEnumerable<Usuario> GetAll()
        {
            throw new NotImplementedException();
        }

        public Usuario GetByEmail(string email)
        {
            throw new NotImplementedException();
        }

        public Usuario GetById(int? id)
        {
            throw new NotImplementedException();
        }

        public void Remove(int id)
        {
            throw new NotImplementedException();
        }

        public void Remove(Usuario obj)
        {
            throw new NotImplementedException();
        }

        public void Update(int id, Usuario obj)
        {
            throw new NotImplementedException();
        }
    }
}

***********************************
Archivo: 20240620161525_init.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\Migrations\20240620161525_init.cs
***********************************
using System;
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace ObligatorioP3.AccesoDatos.Migrations
{
    /// <inheritdoc />
    public partial class init : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.CreateTable(
                name: "Articulos",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: false),
                    Descripcion = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: false),
                    Codigo = table.Column<string>(type: "nvarchar(13)", maxLength: 13, nullable: false),
                    Precio = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Stock = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Articulos", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Clientes",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    RazonSocial = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: false),
                    RUT = table.Column<string>(type: "nvarchar(12)", maxLength: 12, nullable: false),
                    Direccion_Calle = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Direccion_Ciudad = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Direccion_Distancia = table.Column<double>(type: "float", nullable: false),
                    Direccion_Numero = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Clientes", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Parametros",
                columns: table => new
                {
                    Nombre = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Valor = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Parametros", x => x.Nombre);
                });

            migrationBuilder.CreateTable(
                name: "TiposDeMovimiento",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Nombre = table.Column<string>(type: "nvarchar(450)", nullable: false),
                    Aumento = table.Column<bool>(type: "bit", nullable: false),
                    Coeficiente = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_TiposDeMovimiento", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Usuarios",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Email = table.Column<string>(type: "nvarchar(1000)", maxLength: 1000, nullable: false),
                    Rol = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    Contrasena_ContrasenaEncriptada = table.Column<string>(type: "nvarchar(max)", nullable: true),
                    Contrasena_ContrasenaNoEncriptada = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    NombreCompleto_Apellido = table.Column<string>(type: "nvarchar(max)", nullable: false),
                    NombreCompleto_Nombre = table.Column<string>(type: "nvarchar(max)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Usuarios", x => x.Id);
                });

            migrationBuilder.CreateTable(
                name: "Pedidos",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Fecha = table.Column<DateTime>(type: "datetime2", nullable: false),
                    FechaEntrega = table.Column<DateTime>(type: "datetime2", nullable: false),
                    ClienteId = table.Column<int>(type: "int", nullable: false),
                    PrecioFinal = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    IVA = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Anulado = table.Column<bool>(type: "bit", nullable: false),
                    Recargo = table.Column<decimal>(type: "decimal(18,2)", nullable: false),
                    Discriminator = table.Column<string>(type: "nvarchar(13)", maxLength: 13, nullable: false),
                    PlazoExpress = table.Column<int>(type: "int", nullable: true)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_Pedidos", x => x.Id);
                    table.ForeignKey(
                        name: "FK_Pedidos_Clientes_ClienteId",
                        column: x => x.ClienteId,
                        principalTable: "Clientes",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "MovimientosDeStock",
                columns: table => new
                {
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    Fecha = table.Column<DateTime>(type: "datetime2", nullable: false),
                    IdArticulo = table.Column<int>(type: "int", nullable: false),
                    IdTipo = table.Column<int>(type: "int", nullable: false),
                    IdUsuario = table.Column<int>(type: "int", nullable: false),
                    Cantidad = table.Column<int>(type: "int", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_MovimientosDeStock", x => x.Id);
                    table.ForeignKey(
                        name: "FK_MovimientosDeStock_Articulos_IdArticulo",
                        column: x => x.IdArticulo,
                        principalTable: "Articulos",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MovimientosDeStock_TiposDeMovimiento_IdTipo",
                        column: x => x.IdTipo,
                        principalTable: "TiposDeMovimiento",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_MovimientosDeStock_Usuarios_IdUsuario",
                        column: x => x.IdUsuario,
                        principalTable: "Usuarios",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateTable(
                name: "ArticulosPedido",
                columns: table => new
                {
                    PedidoId = table.Column<int>(type: "int", nullable: false),
                    Id = table.Column<int>(type: "int", nullable: false)
                        .Annotation("SqlServer:Identity", "1, 1"),
                    ArticuloId = table.Column<int>(type: "int", nullable: false),
                    Unidades = table.Column<int>(type: "int", nullable: false),
                    PrecioUnitario = table.Column<decimal>(type: "decimal(18,2)", nullable: false)
                },
                constraints: table =>
                {
                    table.PrimaryKey("PK_ArticulosPedido", x => new { x.PedidoId, x.Id });
                    table.ForeignKey(
                        name: "FK_ArticulosPedido_Articulos_ArticuloId",
                        column: x => x.ArticuloId,
                        principalTable: "Articulos",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                    table.ForeignKey(
                        name: "FK_ArticulosPedido_Pedidos_PedidoId",
                        column: x => x.PedidoId,
                        principalTable: "Pedidos",
                        principalColumn: "Id",
                        onDelete: ReferentialAction.Cascade);
                });

            migrationBuilder.CreateIndex(
                name: "IX_Articulos_Codigo",
                table: "Articulos",
                column: "Codigo",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Articulos_Nombre",
                table: "Articulos",
                column: "Nombre",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_ArticulosPedido_ArticuloId",
                table: "ArticulosPedido",
                column: "ArticuloId");

            migrationBuilder.CreateIndex(
                name: "IX_Clientes_RUT",
                table: "Clientes",
                column: "RUT",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosDeStock_IdArticulo",
                table: "MovimientosDeStock",
                column: "IdArticulo");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosDeStock_IdTipo",
                table: "MovimientosDeStock",
                column: "IdTipo");

            migrationBuilder.CreateIndex(
                name: "IX_MovimientosDeStock_IdUsuario",
                table: "MovimientosDeStock",
                column: "IdUsuario");

            migrationBuilder.CreateIndex(
                name: "IX_Pedidos_ClienteId",
                table: "Pedidos",
                column: "ClienteId");

            migrationBuilder.CreateIndex(
                name: "IX_TiposDeMovimiento_Nombre",
                table: "TiposDeMovimiento",
                column: "Nombre",
                unique: true);

            migrationBuilder.CreateIndex(
                name: "IX_Usuarios_Email",
                table: "Usuarios",
                column: "Email",
                unique: true);
        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {
            migrationBuilder.DropTable(
                name: "ArticulosPedido");

            migrationBuilder.DropTable(
                name: "MovimientosDeStock");

            migrationBuilder.DropTable(
                name: "Parametros");

            migrationBuilder.DropTable(
                name: "Pedidos");

            migrationBuilder.DropTable(
                name: "Articulos");

            migrationBuilder.DropTable(
                name: "TiposDeMovimiento");

            migrationBuilder.DropTable(
                name: "Usuarios");

            migrationBuilder.DropTable(
                name: "Clientes");
        }
    }
}

***********************************
Archivo: 20240620161525_init.Designer.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\Migrations\20240620161525_init.Designer.cs
***********************************
// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ObligatorioP3.AccesoDatos.EF;

#nullable disable

namespace ObligatorioP3.AccesoDatos.Migrations
{
    [DbContext(typeof(ObligatorioP3Context))]
    [Migration("20240620161525_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.ParametrosConfigurables.Parametro", b =>
                {
                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Nombre");

                    b.ToTable("Parametros");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RUT")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.ComplexProperty<Dictionary<string, object>>("Direccion", "ObligatorioP3.LogicaNegocio.Entidades.Cliente.Direccion#Direccion", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Ciudad")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Distancia")
                                .HasColumnType("float");

                            b1.Property<int>("Numero")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.HasIndex("RUT")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Contrasena", "ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario.Contrasena#Contrasena", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("ContrasenaEncriptada")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ContrasenaNoEncriptada")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("NombreCompleto", "ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario.NombreCompleto#NombreCompleto", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Apellido")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.MovimientoStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdArticulo")
                        .HasColumnType("int");

                    b.Property<int>("IdTipo")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdArticulo");

                    b.HasIndex("IdTipo");

                    b.HasIndex("IdUsuario");

                    b.ToTable("MovimientosDeStock");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IVA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Recargo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pedidos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pedido");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.TipoDeMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aumento")
                        .HasColumnType("bit");

                    b.Property<int>("Coeficiente")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("TiposDeMovimiento");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.PedidoComun", b =>
                {
                    b.HasBaseType("ObligatorioP3.LogicaNegocio.Entidades.Pedido");

                    b.HasDiscriminator().HasValue("PedidoComun");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.PedidoExpress", b =>
                {
                    b.HasBaseType("ObligatorioP3.LogicaNegocio.Entidades.Pedido");

                    b.Property<int>("PlazoExpress")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PedidoExpress");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.MovimientoStock", b =>
                {
                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("IdArticulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.TipoDeMovimiento", "Tipo")
                        .WithMany()
                        .HasForeignKey("IdTipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Articulo");

                    b.Navigation("Tipo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("ObligatorioP3.LogicaNegocio.Entidades.AssosiationClasses.ArticulosPedido", "Lineas", b1 =>
                        {
                            b1.Property<int>("PedidoId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ArticuloId")
                                .HasColumnType("int");

                            b1.Property<decimal>("PrecioUnitario")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("Unidades")
                                .HasColumnType("int");

                            b1.HasKey("PedidoId", "Id");

                            b1.HasIndex("ArticuloId");

                            b1.ToTable("ArticulosPedido");

                            b1.HasOne("ObligatorioP3.LogicaNegocio.Entidades.Articulo", "Articulo")
                                .WithMany()
                                .HasForeignKey("ArticuloId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("PedidoId");

                            b1.Navigation("Articulo");
                        });

                    b.Navigation("Cliente");

                    b.Navigation("Lineas");
                });
#pragma warning restore 612, 618
        }
    }
}

***********************************
Archivo: 20240620162838_init2.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\Migrations\20240620162838_init2.cs
***********************************
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace ObligatorioP3.AccesoDatos.Migrations
{
    /// <inheritdoc />
    public partial class init2 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}

***********************************
Archivo: 20240620162838_init2.Designer.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\Migrations\20240620162838_init2.Designer.cs
***********************************
// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ObligatorioP3.AccesoDatos.EF;

#nullable disable

namespace ObligatorioP3.AccesoDatos.Migrations
{
    [DbContext(typeof(ObligatorioP3Context))]
    [Migration("20240620162838_init2")]
    partial class init2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.ParametrosConfigurables.Parametro", b =>
                {
                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Nombre");

                    b.ToTable("Parametros");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RUT")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.ComplexProperty<Dictionary<string, object>>("Direccion", "ObligatorioP3.LogicaNegocio.Entidades.Cliente.Direccion#Direccion", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Ciudad")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Distancia")
                                .HasColumnType("float");

                            b1.Property<int>("Numero")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.HasIndex("RUT")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Contrasena", "ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario.Contrasena#Contrasena", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("ContrasenaEncriptada")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ContrasenaNoEncriptada")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("NombreCompleto", "ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario.NombreCompleto#NombreCompleto", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Apellido")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.MovimientoStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdArticulo")
                        .HasColumnType("int");

                    b.Property<int>("IdTipo")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdArticulo");

                    b.HasIndex("IdTipo");

                    b.HasIndex("IdUsuario");

                    b.ToTable("MovimientosDeStock");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IVA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Recargo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pedidos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pedido");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.TipoDeMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aumento")
                        .HasColumnType("bit");

                    b.Property<int>("Coeficiente")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("TiposDeMovimiento");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.PedidoComun", b =>
                {
                    b.HasBaseType("ObligatorioP3.LogicaNegocio.Entidades.Pedido");

                    b.HasDiscriminator().HasValue("PedidoComun");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.PedidoExpress", b =>
                {
                    b.HasBaseType("ObligatorioP3.LogicaNegocio.Entidades.Pedido");

                    b.Property<int>("PlazoExpress")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PedidoExpress");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.MovimientoStock", b =>
                {
                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("IdArticulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.TipoDeMovimiento", "Tipo")
                        .WithMany()
                        .HasForeignKey("IdTipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Articulo");

                    b.Navigation("Tipo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("ObligatorioP3.LogicaNegocio.Entidades.AssosiationClasses.ArticulosPedido", "Lineas", b1 =>
                        {
                            b1.Property<int>("PedidoId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ArticuloId")
                                .HasColumnType("int");

                            b1.Property<decimal>("PrecioUnitario")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("Unidades")
                                .HasColumnType("int");

                            b1.HasKey("PedidoId", "Id");

                            b1.HasIndex("ArticuloId");

                            b1.ToTable("ArticulosPedido");

                            b1.HasOne("ObligatorioP3.LogicaNegocio.Entidades.Articulo", "Articulo")
                                .WithMany()
                                .HasForeignKey("ArticuloId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("PedidoId");

                            b1.Navigation("Articulo");
                        });

                    b.Navigation("Cliente");

                    b.Navigation("Lineas");
                });
#pragma warning restore 612, 618
        }
    }
}

***********************************
Archivo: 20240620164859_init3.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\Migrations\20240620164859_init3.cs
***********************************
using Microsoft.EntityFrameworkCore.Migrations;

#nullable disable

namespace ObligatorioP3.AccesoDatos.Migrations
{
    /// <inheritdoc />
    public partial class init3 : Migration
    {
        /// <inheritdoc />
        protected override void Up(MigrationBuilder migrationBuilder)
        {

        }

        /// <inheritdoc />
        protected override void Down(MigrationBuilder migrationBuilder)
        {

        }
    }
}

***********************************
Archivo: 20240620164859_init3.Designer.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\Migrations\20240620164859_init3.Designer.cs
***********************************
// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ObligatorioP3.AccesoDatos.EF;

#nullable disable

namespace ObligatorioP3.AccesoDatos.Migrations
{
    [DbContext(typeof(ObligatorioP3Context))]
    [Migration("20240620164859_init3")]
    partial class init3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.ParametrosConfigurables.Parametro", b =>
                {
                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Nombre");

                    b.ToTable("Parametros");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RUT")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.ComplexProperty<Dictionary<string, object>>("Direccion", "ObligatorioP3.LogicaNegocio.Entidades.Cliente.Direccion#Direccion", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Ciudad")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Distancia")
                                .HasColumnType("float");

                            b1.Property<int>("Numero")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.HasIndex("RUT")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Contrasena", "ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario.Contrasena#Contrasena", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("ContrasenaEncriptada")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ContrasenaNoEncriptada")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("NombreCompleto", "ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario.NombreCompleto#NombreCompleto", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Apellido")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.MovimientoStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdArticulo")
                        .HasColumnType("int");

                    b.Property<int>("IdTipo")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdArticulo");

                    b.HasIndex("IdTipo");

                    b.HasIndex("IdUsuario");

                    b.ToTable("MovimientosDeStock");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IVA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Recargo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pedidos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pedido");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.TipoDeMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aumento")
                        .HasColumnType("bit");

                    b.Property<int>("Coeficiente")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("TiposDeMovimiento");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.PedidoComun", b =>
                {
                    b.HasBaseType("ObligatorioP3.LogicaNegocio.Entidades.Pedido");

                    b.HasDiscriminator().HasValue("PedidoComun");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.PedidoExpress", b =>
                {
                    b.HasBaseType("ObligatorioP3.LogicaNegocio.Entidades.Pedido");

                    b.Property<int>("PlazoExpress")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PedidoExpress");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.MovimientoStock", b =>
                {
                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("IdArticulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.TipoDeMovimiento", "Tipo")
                        .WithMany()
                        .HasForeignKey("IdTipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Articulo");

                    b.Navigation("Tipo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("ObligatorioP3.LogicaNegocio.Entidades.AssosiationClasses.ArticulosPedido", "Lineas", b1 =>
                        {
                            b1.Property<int>("PedidoId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ArticuloId")
                                .HasColumnType("int");

                            b1.Property<decimal>("PrecioUnitario")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("Unidades")
                                .HasColumnType("int");

                            b1.HasKey("PedidoId", "Id");

                            b1.HasIndex("ArticuloId");

                            b1.ToTable("ArticulosPedido");

                            b1.HasOne("ObligatorioP3.LogicaNegocio.Entidades.Articulo", "Articulo")
                                .WithMany()
                                .HasForeignKey("ArticuloId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("PedidoId");

                            b1.Navigation("Articulo");
                        });

                    b.Navigation("Cliente");

                    b.Navigation("Lineas");
                });
#pragma warning restore 612, 618
        }
    }
}

***********************************
Archivo: ObligatorioP3ContextModelSnapshot.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.AccesoDatos\Migrations\ObligatorioP3ContextModelSnapshot.cs
***********************************
// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ObligatorioP3.AccesoDatos.EF;

#nullable disable

namespace ObligatorioP3.AccesoDatos.Migrations
{
    [DbContext(typeof(ObligatorioP3Context))]
    partial class ObligatorioP3ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Libreria.LogicaNegocio.Entidades.ParametrosConfigurables.Parametro", b =>
                {
                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Valor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Nombre");

                    b.ToTable("Parametros");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Articulo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Precio")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Articulos");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("RUT")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<string>("RazonSocial")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.ComplexProperty<Dictionary<string, object>>("Direccion", "ObligatorioP3.LogicaNegocio.Entidades.Cliente.Direccion#Direccion", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Calle")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Ciudad")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("Distancia")
                                .HasColumnType("float");

                            b1.Property<int>("Numero")
                                .HasColumnType("int");
                        });

                    b.HasKey("Id");

                    b.HasIndex("RUT")
                        .IsUnique();

                    b.ToTable("Clientes");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Rol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("Contrasena", "ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario.Contrasena#Contrasena", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("ContrasenaEncriptada")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("ContrasenaNoEncriptada")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("NombreCompleto", "ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario.NombreCompleto#NombreCompleto", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Apellido")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Nombre")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.MovimientoStock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<int>("IdArticulo")
                        .HasColumnType("int");

                    b.Property<int>("IdTipo")
                        .HasColumnType("int");

                    b.Property<int>("IdUsuario")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("IdArticulo");

                    b.HasIndex("IdTipo");

                    b.HasIndex("IdUsuario");

                    b.ToTable("MovimientosDeStock");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Anulado")
                        .HasColumnType("bit");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEntrega")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("IVA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PrecioFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Recargo")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.ToTable("Pedidos");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pedido");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.TipoDeMovimiento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Aumento")
                        .HasColumnType("bit");

                    b.Property<int>("Coeficiente")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("TiposDeMovimiento");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.PedidoComun", b =>
                {
                    b.HasBaseType("ObligatorioP3.LogicaNegocio.Entidades.Pedido");

                    b.HasDiscriminator().HasValue("PedidoComun");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.PedidoExpress", b =>
                {
                    b.HasBaseType("ObligatorioP3.LogicaNegocio.Entidades.Pedido");

                    b.Property<int>("PlazoExpress")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("PedidoExpress");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.MovimientoStock", b =>
                {
                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.Articulo", "Articulo")
                        .WithMany()
                        .HasForeignKey("IdArticulo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.TipoDeMovimiento", "Tipo")
                        .WithMany()
                        .HasForeignKey("IdTipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("IdUsuario")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Articulo");

                    b.Navigation("Tipo");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ObligatorioP3.LogicaNegocio.Entidades.Pedido", b =>
                {
                    b.HasOne("ObligatorioP3.LogicaNegocio.Entidades.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsMany("ObligatorioP3.LogicaNegocio.Entidades.AssosiationClasses.ArticulosPedido", "Lineas", b1 =>
                        {
                            b1.Property<int>("PedidoId")
                                .HasColumnType("int");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("ArticuloId")
                                .HasColumnType("int");

                            b1.Property<decimal>("PrecioUnitario")
                                .HasColumnType("decimal(18,2)");

                            b1.Property<int>("Unidades")
                                .HasColumnType("int");

                            b1.HasKey("PedidoId", "Id");

                            b1.HasIndex("ArticuloId");

                            b1.ToTable("ArticulosPedido");

                            b1.HasOne("ObligatorioP3.LogicaNegocio.Entidades.Articulo", "Articulo")
                                .WithMany()
                                .HasForeignKey("ArticuloId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("PedidoId");

                            b1.Navigation("Articulo");
                        });

                    b.Navigation("Cliente");

                    b.Navigation("Lineas");
                });
#pragma warning restore 612, 618
        }
    }
}

***********************************
Archivo: Articulo.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Entidades\Articulo.cs
***********************************
using Microsoft.EntityFrameworkCore;
using ObligatorioP3.LogicaNegocio.Excepciones.Articulo;
using ObligatorioP3.LogicaNegocio.InterfacesEntidades;
using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace ObligatorioP3.LogicaNegocio.Entidades
{
    public class Articulo : IEntity, IValidable<Articulo>, IArticulo
    {
        #region Propiedades y constructores
        public int Id { get;set; }
        [Required, StringLength(1000, MinimumLength = 6)]
        public string Nombre { get; set; }
        [Required, StringLength(1000, MinimumLength = 5)]
        public string Descripcion { get; set; }
        [Required, StringLength(13)]
        public string Codigo { get; set; }
        public decimal Precio { get; set; }
        public int Stock { get; set; }

        private Articulo() { }

        public Articulo(string nombre, string descripcion, string codigo, decimal precio, int stock) 
        {
            Nombre = nombre;
            Descripcion = descripcion;
            Codigo = codigo;
            Precio = precio;
            Stock = stock;
            EsValido();
        }

        public Articulo(int id, string nombre, string descripcion, string codigo, decimal precio, int stock)
        {
            Id = id;
            Nombre = nombre;
            Descripcion = descripcion;
            Codigo = codigo;
            Precio = precio;
            Stock = stock;
            EsValido();
        }
        #endregion
        public void EsValido()
        {
            if (Nombre == null) throw new ArticuloNoValidoException("Error, nombre nulo");
            if (Descripcion == null) throw new ArticuloNoValidoException("Error, descripcion nula");
            if (Codigo == null) throw new ArticuloNoValidoException("Error, Codigo nulo");
            if (Precio == null) throw new ArticuloNoValidoException("Error, Precio nulo");
            if (Stock == null) throw new ArticuloNoValidoException("Error, Stock nulo");
            if (Descripcion.Length < 5) throw new ArticuloNoValidoException("Error, la descripcion debe contener al menos 5 caracteres");
            if (Codigo.Trim().Length != 13) throw new ArticuloNoValidoException("Error, el código debe contener 13 digitos");
            if (Codigo.Contains(" ")) throw new ArticuloNoValidoException("Error, el código debe contener 13 digitos");
            if (!Codigo.All(char.IsDigit)) throw new ArticuloNoValidoException("Error, el código debe contener 13 digitos");
            if (Precio < 0) throw new ArticuloNoValidoException("Error, Precio menor a 0");
            if (Stock < 0) throw new ArticuloNoValidoException("Error, Stock menor a 0");
            if(Nombre.Length<10 || Nombre.Length > 200) { throw new ArticuloNoValidoException("Error, Nombre de articulo fuera de rango de caracteres: de 10 a 200"); }
            
        }
    }
}

***********************************
Archivo: Cliente.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Entidades\Cliente.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.ValueObjects.Cliente;
using ObligatorioP3.LogicaNegocio.Excepciones.Cliente;
using ObligatorioP3.LogicaNegocio.InterfacesEntidades;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Data.SqlTypes;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Entidades
{
    public class Cliente : IEntity, IValidable<Cliente>, ICliente
    {
        public int Id { get; set; }
        [Required, StringLength(1000, MinimumLength = 6)]
        public string RazonSocial { get; set; }
        [Required, StringLength(12)]
        public string RUT { get; set; }
        public Direccion Direccion { get; set; }
        

        private Cliente()
        {

        }

        public Cliente(int id, string razonSocial, string rut, string calle, string ciudad, int numero, double distancia)
        {
            Id = id;
            RazonSocial = razonSocial;
            RUT = rut;
            Direccion = new Direccion(calle,ciudad,numero,distancia);
            EsValido();
        }

        public void EsValido()
        {
            if (RazonSocial == null) throw new ClienteNoValidoException("Error, razon social nula");
            if (RUT == null) throw new ClienteNoValidoException("Error, RUT nulo");
            if (RUT.Length != 12) throw new ClienteNoValidoException("Error, RUT debe poseer 12 digitos");
            if (!RUT.All(char.IsDigit)) throw new ClienteNoValidoException("Error, RUT debe ser solo digitos");
            if (Direccion == null) throw new ClienteNoValidoException("Error, direccion nula");
        }
    }
}

***********************************
Archivo: MovimientoStock.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Entidades\MovimientoStock.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.InterfacesEntidades;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Entidades
{
    public class MovimientoStock : IMovimientoStock
    {
        public int Id { get; set; }
        public DateTime Fecha { get; set; }
        [ForeignKey(nameof(Articulo))]
        public int IdArticulo { get; set; }
        public Articulo? Articulo { get; set; }
        [ForeignKey(nameof(Tipo))]
        public int IdTipo { get; set; }
        public TipoDeMovimiento? Tipo { get; set; }
        [ForeignKey(nameof(Usuario))]
        public int IdUsuario { get; set; }
        public Usuario? Usuario { get; set; }
        public int Cantidad { get; set; }

        public MovimientoStock()
        {
            
        }

        public MovimientoStock(int id, DateTime fecha, int idArticulo, Articulo articulo, int idTipo, TipoDeMovimiento tipo, int idUsuario, Usuario usuario, int cantidad)
        {
            Id = id;
            Fecha = fecha;
            IdArticulo = idArticulo;
            Articulo = articulo;
            IdTipo = idTipo;
            Tipo = tipo;
            IdUsuario = idUsuario;
            Usuario = usuario;
            Cantidad = cantidad;
            EsValido();
        }

        public MovimientoStock(DateTime fecha, int idArticulo, Articulo articulo, int idTipo, TipoDeMovimiento tipo, int idUsuario, Usuario usuario, int cantidad)
        {
            Fecha = fecha;
            IdArticulo = idArticulo;
            Articulo = articulo;
            IdTipo = idTipo;
            Tipo = tipo;
            IdUsuario = idUsuario;
            Usuario = usuario;
            Cantidad = cantidad;
            EsValido();
        }

        public void EsValido()
        {
            if (this.Articulo == null) throw new Exception("Error, articulo de movimiento nula");
            if (this.Tipo == null) throw new Exception("Error, tipo de movimiento nula");
            if (this.Usuario == null) throw new Exception("Error, usuario de movimiento nula");
            if (this.Cantidad <= 0) throw new Exception("Error, las unidades deben ser 1 o más");
            if (this.Usuario.Rol != "encargado") throw new Exception("Error, el usuario no es un encargado");
            if (this.Tipo == null) throw new Exception("Error, tipo de movimiento inválido");
        }
    }
}

***********************************
Archivo: Pedido.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Entidades\Pedido.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.AssosiationClasses;
using ObligatorioP3.LogicaNegocio.Excepciones.Pedido;
using ObligatorioP3.LogicaNegocio.InterfacesEntidades;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Entidades
{
    public abstract class Pedido : IEntity, IValidable<Pedido>, IPedido
    {
        #region Propiedades y constructores
        public int Id { get; set; }
        [DataType(DataType.Date)]
        public DateTime Fecha { get; set; }
        [DataType(DataType.Date)]
        public DateTime FechaEntrega { get; set; }
        public Cliente Cliente { get; set; }
        public decimal PrecioFinal { get; set; }

        public List<ArticulosPedido> Lineas;

        public decimal IVA { get; set; }
        public bool Anulado { get; set; }
        
        public decimal Recargo { get; set; }

        public Pedido() { }
        public Pedido(DateTime fechaEntrega, Cliente cliente, List<ArticulosPedido> lineas, decimal iva, decimal recargo) 
        {
            Fecha = DateTime.Now;
            FechaEntrega = fechaEntrega;
            Cliente = cliente;
            Lineas = lineas;
            IVA = iva;
            Anulado = false;
            Recargo = recargo;
        }
        #endregion
        public virtual void EsValido()
        {
            if (Fecha == null) throw new PedidoNoValidoException("Error, fecha nula");
            if (FechaEntrega == null) throw new PedidoNoValidoException("Error, fecha nula");
            if (Cliente == null) throw new PedidoNoValidoException("Error, cliente nulo");
            if (FechaEntrega.Date < Fecha.Date) throw new PedidoNoValidoException("Error, fecha de entrega anterior a fecha actual");
        }

        public virtual decimal CalcularYFijarPrecioFinal()
        {
            decimal total = 0;
            foreach (var item in Lineas)
            {
                total += item.PrecioUnitario * item.Unidades;
            }
            return total;
        }

        public virtual void AnularPedido()
        {
            Anulado = true;
        }
    }
}

***********************************
Archivo: PedidoComun.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Entidades\PedidoComun.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.AssosiationClasses;
using ObligatorioP3.LogicaNegocio.Excepciones.Pedido;
using ObligatorioP3.LogicaNegocio.InterfacesEntidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;

namespace ObligatorioP3.LogicaNegocio.Entidades
{
    public class PedidoComun : Pedido
    {
        private PedidoComun() : base() { }
        public PedidoComun(DateTime fechaEntrega, Cliente cliente, List<ArticulosPedido> lineas, decimal iva, decimal recargo) : base(fechaEntrega, cliente, lineas, iva, recargo) 
        {
            
            PrecioFinal = CalcularYFijarPrecioFinal();
            EsValido();
        }

        public override void EsValido()
        {
            base.EsValido();
            if (7 > (FechaEntrega.Day - Fecha.Day)) throw new PedidoNoValidoException("Error, el plazo de entrega del pedido Común no puede ser menor a 1 semana");
        }

        public override decimal CalcularYFijarPrecioFinal()
        {
            decimal precioBase = base.CalcularYFijarPrecioFinal();
                decimal total = precioBase * Recargo;
                return total * IVA;
        }

        public override void AnularPedido()
        {
            base.AnularPedido();
        }
    }
}

***********************************
Archivo: PedidoExpress.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Entidades\PedidoExpress.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.AssosiationClasses;
using ObligatorioP3.LogicaNegocio.Excepciones.Pedido;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Entidades
{
    public class PedidoExpress : Pedido
    {
        public int PlazoExpress { get; set; }

        private PedidoExpress() : base() { }
        public PedidoExpress(DateTime fechaEntrega, Cliente cliente, List<ArticulosPedido> lineas, decimal iva, int plazoExpress, decimal recargo) : base(fechaEntrega, cliente, lineas, iva, recargo)
        {
            PlazoExpress = plazoExpress;
            PrecioFinal = CalcularYFijarPrecioFinal();
        }

        public override void EsValido()
        {
            base.EsValido();
            if ((PlazoExpress < (FechaEntrega.Day - Fecha.Day))) throw new PedidoNoValidoException("Error, el plazo de entrega del pedido Express no puede superar los 5 días");
        }

        public override decimal CalcularYFijarPrecioFinal()
        {
            decimal precioBase = base.CalcularYFijarPrecioFinal();
                decimal total = precioBase * Recargo;
                return total * IVA;
        }

        public override void AnularPedido()
        {
            base.AnularPedido();
        }
    }
}

***********************************
Archivo: TipoDeMovimiento.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Entidades\TipoDeMovimiento.cs
***********************************
using Microsoft.EntityFrameworkCore;
using ObligatorioP3.LogicaNegocio.Entidades.ValueObjects.Usuario;
using ObligatorioP3.LogicaNegocio.Excepciones.TipoDeMovimiento;
using ObligatorioP3.LogicaNegocio.InterfacesEntidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Entidades
{
    [Index(nameof(Nombre),IsUnique =true)]
    public class TipoDeMovimiento : ITipoDeMovimiento
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public bool Aumento { get; set; }

        public int Coeficiente { get; set; }
        public TipoDeMovimiento()
        {
            
        }
        public TipoDeMovimiento(int id, string nombre, bool aumento)
        {
            Id = id;
            Nombre = nombre;
            Aumento = aumento;
            if (Aumento) { Coeficiente = 1; }
            else { Coeficiente = -1; }
            EsValido();
        }

        public TipoDeMovimiento(string nombre, bool aumento)
        {
            Nombre = nombre;
            Aumento = aumento;
            if (Aumento) { Coeficiente = 1; }
            else { Coeficiente = -1; }
            EsValido();
        }

        public void EsValido()
        {
            if (this.Nombre == null) throw new TipoDeMovimientoNoValidoException("Error, nombre de tipo nulo");
            if (this.Aumento == null) throw new TipoDeMovimientoNoValidoException("Error, aumento de tipo nulo");
        }
        public void ModificarDatos(TipoDeMovimiento obj) { 
            this.Nombre = obj.Nombre;
            this.Aumento = obj.Aumento; 
            this.Coeficiente = obj.Coeficiente;
            EsValido();
        }
    }
}

***********************************
Archivo: IArticulo.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesEntidades\IArticulo.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesEntidades
{
    public interface IArticulo
    {
    }
}

***********************************
Archivo: ICliente.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesEntidades\ICliente.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesEntidades
{
    public interface ICliente
    {
    }
}

***********************************
Archivo: IEntity.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesEntidades\IEntity.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesEntidades
{
    public interface IEntity
    {
        public int Id { get; set; }
    }
}

***********************************
Archivo: IMovimientoStock.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesEntidades\IMovimientoStock.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesEntidades
{
    internal interface IMovimientoStock:IEntity,IValidable<MovimientoStock>
    {
    }
}

***********************************
Archivo: IPedido.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesEntidades\IPedido.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesEntidades
{
    public interface IPedido
    {
        decimal CalcularYFijarPrecioFinal();
        void AnularPedido();
    }
}

***********************************
Archivo: ITipoDeMovimiento.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesEntidades\ITipoDeMovimiento.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesEntidades
{
    internal interface ITipoDeMovimiento:IEntity, IValidable<TipoDeMovimiento>
    {
        public void ModificarDatos(TipoDeMovimiento obj);
    }
}

***********************************
Archivo: IUsuario.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesEntidades\IUsuario.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesEntidades
{
    public interface IUsuario
    {
        void ModificarDatos(Usuario obj);
        //string EncriptarContraseña(string contraseña); No se puede declarar en la clase como metodo estatico, preferimos dejarlo estatico y quitarlo de la interfaz.
    }
}

***********************************
Archivo: IValidable.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesEntidades\IValidable.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesEntidades
{
    public interface IValidable<T> where T : class
    {
        void EsValido();
    }
}

***********************************
Archivo: IRepositorio.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesRepositorios\IRepositorio.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesRepositorios
{
    public interface IRepositorio<T> : IRepositorioDisminuido<T> where T : class
    {
        T GetById(int? id);
        void Update(int id, T obj);
        void Remove(int id);
        void Remove(T obj);
        IEnumerable<T> GetAll();
    }
}

***********************************
Archivo: IRepositorioArticulo.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesRepositorios\IRepositorioArticulo.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesRepositorios
{
    public interface IRepositorioArticulo : IRepositorio<Articulo>
    {
        IEnumerable<Articulo?> GetArticulosConMovimientosSegunFechas(DateTime fecha1, DateTime fecha2, int pagina, int cantidadRegistros);
    }
}

***********************************
Archivo: IRepositorioCliente.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesRepositorios\IRepositorioCliente.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesRepositorios
{
    public interface IRepositorioCliente:IRepositorio<Cliente>
    {
        public IEnumerable<Cliente> FiltrarXTexto(string txt);
        public IEnumerable<Cliente> FiltrarXMonto(decimal money);
    }
}

***********************************
Archivo: IRepositorioDisminuido.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesRepositorios\IRepositorioDisminuido.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesRepositorios
{
    public interface IRepositorioDisminuido<T> where T : class
    {
        void Add(T obj);
    }
}

***********************************
Archivo: IRepositorioMovimiento.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesRepositorios\IRepositorioMovimiento.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesRepositorios
{
    public interface IRepositorioMovimiento : IRepositorioDisminuido<MovimientoStock>
    {
        public IEnumerable<Object> GetGrouped();

        public IEnumerable<MovimientoStock> Filtrar(int idArticulo, int idTipo, int pagina, int cantidadRegistros);

        int ObtenerStockActual(int idArticulo);
    }
}

***********************************
Archivo: IRepositorioParametro.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesRepositorios\IRepositorioParametro.cs
***********************************
using Libreria.LogicaNegocio.Entidades.ParametrosConfigurables;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Libreria.LogicaNegocio.InterfacesRepositorios
{
    public interface IRepositorioParametro : IRepositorio<Parametro>
    {
        public Parametro GetParametro(string nombre);
    }
}

***********************************
Archivo: IRepositorioPedido.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesRepositorios\IRepositorioPedido.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesRepositorios
{
    public interface IRepositorioPedido:IRepositorio<Pedido>
    {
        public IEnumerable<Pedido> GetAllAnulados();

        public IEnumerable<Pedido> Filtrar(DateTime date);

        public void Anular(int id);
    }
}

***********************************
Archivo: IRepositorioTipoDeMovimientoEF.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesRepositorios\IRepositorioTipoDeMovimientoEF.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesRepositorios
{
    public interface IRepositorioTipoDeMovimientoEF:IRepositorio<TipoDeMovimiento>
    {
    }
}

***********************************
Archivo: IRepositorioUsuario.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\InterfacesRepositorios\IRepositorioUsuario.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.InterfacesRepositorios
{
    public interface IRepositorioUsuario:IRepositorio<Usuario>
    {
        public Usuario GetByEmail(string email);
    }
}

***********************************
Archivo: ArticuloController.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\Obligatoriop3.WebApi\Controllers\ArticuloController.cs
***********************************
using Microsoft.AspNetCore.Mvc;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using ObligatorioP3.AccesoDatos.EF;
using ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Articulos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Articulos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos;
using ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Pedidos;
using Microsoft.AspNetCore.Authorization;
using System.Web;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860


namespace Obligatoriop3.WebApi.Controllers
{
    ///<summary>Controller para manejar las operaciones con articulos</summary>
    [ApiConventionType(typeof(DefaultApiConventions))]
    [Route("api/[controller]")]
    [ApiController]

    public class ArticuloController : ControllerBase
    {
        private IGetAllArticulos _getAllArticulos;
        private IGetArticulosConMovimientosSegunFechas _getArticulosConMovimientosSegunFechas;
        public ArticuloController(IGetAllArticulos getall, IGetArticulosConMovimientosSegunFechas getArticulosConMovimientosSegunFechas)
        {
            _getAllArticulos = getall;
            _getArticulosConMovimientosSegunFechas = getArticulosConMovimientosSegunFechas;
        }

        /// <summary>
        /// Get de todos los articulos
        /// </summary>
        /// <returns>Si no encuentra ninguno devuelve 404, de otro modo devuelve 200, si ocurre una excepcion devuelve 500</returns>
        /// <response code="200">Hay articulos</response>
        /// <response code="404">No hay articulos</response>
        /// <response code="500">Excepcion interna</response>
        [HttpGet]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public ActionResult<IEnumerable<ArticuloListarDto>> Get()
        {
            try
            {
                //El metodo getall en el repositorio los devuelve ordenados
                var articulos = _getAllArticulos.Ejecutar();
                if (!articulos.Any())
                {
                    return NotFound();
                }
                return Ok(articulos);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }

        /// <summary>
        /// Recibe dos fechas y en base a ellas filtra los articulos que tuvieron movimientos entre ellas
        /// </summary>
        /// <param name="fecha1">Fecha inicio busqueda</param>
        /// <param name="fecha2">Fecha final busqueda</param>
        /// <returns>Devuelve los articulos con movimientos entre esas fechas</returns>
        /// <response code="200">Hay articulos</response>
        /// <response code="404">No hay articulos</response>
        /// <response code="500">Excepcion interna</response>
        [HttpGet("{fecha1}/{fecha2}/{pagina}")]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [Authorize(Roles = "encargado")]
        public ActionResult<IEnumerable<ArticuloListarDto>> GetArticulosConMovimientosEnFechas(string fecha1, string fecha2, int pagina)
        {
            try
            { 
                string fecha1Decodificada = HttpUtility.UrlDecode(fecha1);
                string fecha2Decodificada = HttpUtility.UrlDecode(fecha2);
                string fecha1StringReparada = fecha1Decodificada.Replace('-','/');
                string fecha2StringReparada = fecha2Decodificada.Replace('-','/');
                DateTime fecha1FromString = DateTime.Parse(fecha1StringReparada);
                DateTime fecha2FromString = DateTime.Parse(fecha2StringReparada);
                var articulos = _getArticulosConMovimientosSegunFechas.Ejecutar(fecha1FromString, fecha2FromString, pagina);
                if (!articulos.Any()) return NotFound();
                return Ok(articulos);
            }
            catch (Exception ex)
            {

                return StatusCode(500,ex.Message);
            }
        }
    }
}

***********************************
Archivo: MovimientoStockController.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\Obligatoriop3.WebApi\Controllers\MovimientoStockController.cs
***********************************
using Microsoft.AspNetCore.Mvc;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.MovimientosStock;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.MovimientosStock;
using Microsoft.AspNetCore.Authorization;
using System.Security.Claims;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.TiposDeMovimiento;
using ObligatorioP3.LogicaNegocio.Excepciones.TipoDeMovimiento;


// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace Obligatoriop3.WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class MovimientoStockController : ControllerBase
    {
        private IAltaMovimientoStock _altaMovimiento;
        private IListarResumenMovimientos _listarResumenMovimientos;
        private IFiltrarMovimientos _filtrarMovimientos;

        public MovimientoStockController(IAltaMovimientoStock altaMovimientoStock, IListarResumenMovimientos listarResumenMovimientos, IFiltrarMovimientos filtrarMovimientos)
        {
            _altaMovimiento = altaMovimientoStock;
            _listarResumenMovimientos = listarResumenMovimientos;
            _filtrarMovimientos = filtrarMovimientos;
        }

        // POST api/<MovimientoStockController>
        /// <summary>
        /// Registra un nuevo movimiento.
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        /// <response code="201">Fue creado correctamente</response>
        /// <response code="400">Si el movimiento recibido es null o se produce un error de validación</response>    
        /// <response code="401">Si no se pudo autenticar el usuario</response> 
        /// <response code="500">Si se produce una excepción interna, por ejemplo si la base no existiera.</response>           


        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status401Unauthorized)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [Authorize(Roles = "encargado")]
        [HttpPost("")]
        public IActionResult Post([FromBody] MovimientoStockAltaDTO dto)
        {
            if (dto == null) return BadRequest("No se recibió un movimiento");
            try
            {
                var user = HttpContext.User;
                if(!user.Identity.IsAuthenticated)
                    return Unauthorized("Debes loguearte");

                if (user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)==null)
                    return Unauthorized("No tienes el rol de encargado");
                _altaMovimiento.Ejecutar(dto);
                return Created();

            }
            catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }
        }

        // POST api/<MovimientoStockController>
        /// <summary>
        /// Agrupa los movimientos por año
        /// </summary>
        /// <returns>Movimientos agrupados por año</returns>
        /// <response code="200">Existen movimientos agrupados</response>
        /// <response code="401">Si no se pudo autenticar el usuario</response> 
        /// <response code="500">Si se produce una excepción interna, por ejemplo si la base no existiera.</response>     
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [Authorize(Roles = "encargado")]
        [HttpGet]
        public ActionResult<IEnumerable<MovimientoListarAgrupadoDTO>> ListarAgrupados()
        {
            try
            {
                var user = HttpContext.User;
                if (!user.Identity.IsAuthenticated)
                    return Unauthorized("Debes loguearte");

                if (user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role) == null)
                    return Unauthorized("No tienes el rol de encargado");
                IEnumerable<MovimientoListarAgrupadoDTO>  resumenMovimientos = _listarResumenMovimientos.Ejecutar();
                return Ok(resumenMovimientos);
            }
            catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }
        }

        // POST api/<MovimientoStockController>
        /// <summary>
        /// Obtiene los movimientos filtrados por tipo y articulo
        /// </summary>
        /// <param name="idArticulo">Id del articulo</param>
        /// <param name="idTipo">Id del tipo</param>
        /// <returns></returns>
        /// <response code="200">Existen movimientos</response>
        /// <response code="400">Si algun parametro recibido es null</response>    
        /// <response code="404">Si no se encuentran movimientos</response>    
        /// <response code="401">Si no se pudo autenticar el usuario</response> 
        /// <response code="500">Si se produce una excepción interna, por ejemplo si la base no existiera.</response>     
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [Authorize(Roles = "encargado")]
        [HttpGet("{idArticulo}/{idTipo}/{pagina}")]
        public ActionResult<MovimientoListarDTO> GetFiltrados(int idArticulo, int idTipo, int pagina)
        {
            if (idArticulo == null || idTipo == null) return BadRequest();
            try
            {
                var user = HttpContext.User;
                if (!user.Identity.IsAuthenticated)
                    return Unauthorized("Debes loguearte");

                if (user.Claims.FirstOrDefault(c => c.Type == ClaimTypes.Role) == null)
                    return Unauthorized("No tienes el rol de encargado");
                var movimientosFiltrados = _filtrarMovimientos.Ejecutar(idArticulo, idTipo, pagina);
                if (movimientosFiltrados == null || movimientosFiltrados.Count() == 0)
                {
                    return NotFound();
                }
                return Ok(movimientosFiltrados);
            }
            catch (Exception ex)
            {

                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }

        }
    }
}

***********************************
Archivo: PedidoController.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\Obligatoriop3.WebApi\Controllers\PedidoController.cs
***********************************
using Microsoft.AspNetCore.Mvc;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using ObligatorioP3.AccesoDatos.EF;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos;
using ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Pedidos;
using Microsoft.AspNetCore.Http;
// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace Obligatoriop3.WebApi.Controllers
{
    /// <summary>
    /// Controller para manejar las operaciones con pedidos
    /// </summary>
    [ApiConventionType(typeof(DefaultApiConventions))]
    [Route("api/[controller]")]
    [ApiController]

    public class PedidoController : ControllerBase
    {
        private IRepositorioPedido _repoPedidos = new RepositorioPedidoEF(new ObligatorioP3Context());
        private IGetAllPedidosAnulados _getAllPedidosAnulados;
        public PedidoController(IRepositorioPedido repo, IGetAllPedidosAnulados getallanulados)
        {
            _repoPedidos = repo;
            _getAllPedidosAnulados = getallanulados;
        }

        /// <summary>
        /// Get de los pedidos anulados
        /// </summary>
        /// <returns>Si no encuentra ninguno devuelve 404, de otro modo devuelve 200, si ocurre una excepcion devuelve 500</returns>
        /// <response code="200">Hay pedidos</response>
        /// <response code="404">No hay pedidos</response>
        /// <response code="500">Excepcion interna</response>
        [HttpGet]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public ActionResult<IEnumerable<PedidoListarDto>> Get()
        {
            try
            {
                var articulos = _getAllPedidosAnulados.Ejecutar();
                if (!articulos.Any())
                {
                    return NotFound();
                }
                return Ok(articulos);
            }
            catch (Exception ex)
            {
                return StatusCode(500, ex.Message);
            }
        }
    }
}

***********************************
Archivo: TipoDeMovimientoController.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\Obligatoriop3.WebApi\Controllers\TipoDeMovimientoController.cs
***********************************
using Microsoft.AspNetCore.Mvc;
using ObligatorioP3.AccesoDatos.EF;
using ObligatorioP3.LogicaAplicacion;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.TiposDeMovimiento;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.TiposDeMovimiento;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.Excepciones.TipoDeMovimiento;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace Obligatoriop3.WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class TipoDeMovimientoController : ControllerBase
    {
        private IAltaMovimiento _altaTipo;
        private IGetTipoDeMovimiento _buscarTipo;
        private IEditarTipoDeMovimiento _editarTipo;
        private IBorrarTipoDeMovimiento _borrarTipo;

        public TipoDeMovimientoController(IAltaMovimiento altaTipo, IGetTipoDeMovimiento buscarTipo, IEditarTipoDeMovimiento editarTipo, IBorrarTipoDeMovimiento borrarTipo)
        {
            _altaTipo = altaTipo;
            _buscarTipo = buscarTipo;
            _editarTipo = editarTipo;
            _borrarTipo = borrarTipo;
        }

        // GET: api/<TipoDeMovimientoController>
        /// <summary>
        /// Lista todos los tipos de movimiento.
        /// </summary>
        /// <param></param>
        /// <returns></returns>
        /// <response code="200">Retorna la lista</response>
        /// <response code="404">Si no hay tipos</response>    
        /// <response code="500">Si se produce una excepción no contemplada, por ejemplo si la base no existiera.</response>    

        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [HttpGet("")]

        public ActionResult<IEnumerable<TipoDeMovimientoListarDTO>> Get()
        {
            try
            {
                var tipos = _buscarTipo.GetAll();
                if (tipos == null || !tipos.Any()) {
                    return NotFound();
                }
                return Ok(tipos);
            }
            catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }
        }

        // GET api/<TipoDeMovimientoController>/5
        /// <summary>
        /// Obtiene el tipo de movimiento con la id ingresada.
        /// </summary>
        /// <param name="id">Id a buscar</param>
        /// <returns></returns>
        /// <response code="200">Retorna el item</response>
        /// <response code="404">Si no se encuentra</response>    
        /// <response code="400">Si hay un error relacionado a la entidad</response>    
        /// <response code="500">Si se produce una excepción no contemplada, por ejemplo si la base no existiera.</response>    
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [HttpGet("{id}", Name = "GetTipoById")]
        public ActionResult<TipoDeMovimientoListarDTO> Get(int id)
        {
            try
            {
                var tipo = _buscarTipo.GetById(id);
                if (tipo == null)
                {
                    return NotFound();
                }
                return Ok(tipo);
            }
            catch (TipoDeMovimientoNoValidoException ex) { return BadRequest(ex.Message); }
            catch (Exception ex)
            {

                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }

        }

        // POST api/<TipoDeMovimientoController>
        /// <summary>
        /// Registra un nuevo tipodemovimiento.
        /// </summary>
        /// <param name="dto"></param>
        /// <returns></returns>
        /// <response code="201">Retorna el item creado y establece el Header Location a la ubicación del GetById</response>
        /// <response code="400">Si el docente recibido es null o se produce un error de validación</response>    
        /// <response code="500">Si se produce una excepción no contemplada, por ejemplo si la base no existiera.</response>    

        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]


        [HttpPost("")]
        public IActionResult Post([FromBody] TipoDeMovimientoAltaDTO dto)
        {
            if (dto == null) return BadRequest("Debe indicar un tipo de movimiento dto");
            try
            {
                _altaTipo.Ejecutar(dto);
                return CreatedAtRoute("GetTipoById", new { id = dto.Id }, dto);

            }
            catch (TipoDeMovimientoNoValidoException ex)
            {

                return BadRequest(ex.Message);
            }
            catch (Exception ex) { 
                return StatusCode(StatusCodes.Status500InternalServerError, ex.Message);
            }
        }

        // PUT api/<TipoDeMovimientoController>/5
        /// <summary>
        /// Edita un tipo de movimiento.
        /// </summary>
        /// <param name="dto">Datos nuevos</param>
        /// <param name="id">Id del tipo a editar</param>
        /// <returns></returns>
        /// <response code="200">Se edita</response>
        /// <response code="400">Si el tipo recibido es null o se produce un error de validación</response>    
        /// <response code="500">Si se produce una excepción no contemplada, por ejemplo si la base no existiera.</response>    

        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [HttpPut("{id}")]
        public IActionResult Put(int id, [FromBody] TipoDeMovimientoModificacionDto dto)
        {
            if (dto==null)
            {
                return BadRequest("Debe indicar un tipo de movimiento dto");
            }
            try
            {
                _editarTipo.Ejecutar(id,dto);
                return Ok(dto);
            }
            catch (TipoDeMovimientoNoValidoException ex)
            {

                return BadRequest(ex.Message);
            }
            catch(Exception ex) { return StatusCode(StatusCodes.Status500InternalServerError,ex.Message); }


        }

        // DELETE api/<TipoDeMovimientoController>/5
        /// <summary>
        /// Elimina un tipodemovimiento.
        /// </summary>
        /// <param name="id">Id del tipo a borrar</param>
        /// <returns></returns>
        /// <response code="204">Si se elimina exitosamente</response>
        /// <response code="400">Si se produce un error de validación</response>    
        /// <response code="500">Si se produce una excepción no contemplada, por ejemplo si la base no existiera.</response>    

        [ProducesResponseType(StatusCodes.Status204NoContent)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [HttpDelete("{id}")]
        public IActionResult Delete(int id)
        {
            try
            {
                _borrarTipo.Ejecutar(id);
                return NoContent();
            }
            catch (TipoDeMovimientoNoValidoException ex) { return BadRequest(); }
            catch (Exception ex)
            {
                return StatusCode(StatusCodes.Status500InternalServerError);
            }
        }
    }
}

***********************************
Archivo: UsuarioController.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\Obligatoriop3.WebApi\Controllers\UsuarioController.cs
***********************************
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Obligatoriop3.WebApi.DTOS.UsuariosDTO;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using Obligatoriop3.WebApi.UtilidadesJWT;
using ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Usuarios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.TiposDeMovimiento;
using ObligatorioP3.LogicaNegocio.Excepciones.TipoDeMovimiento;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;

// For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860

namespace Obligatoriop3.WebApi.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UsuarioController : ControllerBase
    {
        private ILoginAPI _login;

        public UsuarioController(ILoginAPI login) {
            _login = login;
        }

        /// <summary>
        /// Login de usuarios JWT
        /// </summary>
        /// <param name="usr">DTO que contiene email y contraseña</param>
        /// <returns>Devuelve el token generado, el rol y el email</returns>
        /// <response code="200">Retorna token, rol y email</response>
        /// <response code="401">Falla en credenciales</response>    
        /// <response code="500">Si se produce una excepción no contemplada, por ejemplo si la base no existiera.</response>   

        [ProducesResponseType(StatusCodes.Status201Created)]
        [ProducesResponseType(StatusCodes.Status400BadRequest)]
        [ProducesResponseType(StatusCodes.Status500InternalServerError)]
        [AllowAnonymous]
        [HttpPost("login")]
        public IActionResult Login(UsuarioLoginDTO usr) {
            try
            {
                Usuario? usu = _login.Ejecutar(usr.Email, usr.Contrasena);
                if (usu == null) return Unauthorized("Credenciales incorrectas");
                if (!usu.Rol.Equals("encargado")) return Unauthorized("NO sos encargado, no te corresponde entrar aca.");
                string token = ManejadowJWT.GenerarToken(usu.Email.ValorEmail, usu.Rol);
                return Ok(new { Token = token, Rol = usu.Rol, Email = usu.Email.ValorEmail });
            }
            catch (Exception ex)
            {
                return StatusCode(500,ex.Message);
            }
        }

    }
}

***********************************
Archivo: ManejadowJWT.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\Obligatoriop3.WebApi\UtilidadesJWT\ManejadowJWT.cs
***********************************
using Microsoft.IdentityModel.Tokens;
using System.IdentityModel.Tokens.Jwt;
using System.Security.Claims;
using System.Text;

namespace Obligatoriop3.WebApi.UtilidadesJWT
{
    public class ManejadowJWT
    {
        public static string GenerarToken(string email, string rol)
        {
            var claveDificil = "GastonSecreto_MatiasSecreto_GastonSecreto_MatiasSecreto_GastonSecreto_MatiasSecreto";
            var claveDificilEncriptada = new SymmetricSecurityKey(Encoding.UTF8.GetBytes(claveDificil));
            List<Claim> claims = [
                new Claim(ClaimTypes.Email, email),
                new Claim(ClaimTypes.Role, rol)
                ];

            var credenciales = new SigningCredentials(claveDificilEncriptada, SecurityAlgorithms.HmacSha512Signature);

            var token = new JwtSecurityToken(claims: claims, expires: DateTime.Now.AddDays(1), signingCredentials: credenciales);

            var jwt = new JwtSecurityTokenHandler().WriteToken(token);

            return jwt;

        }
    }
}

***********************************
Archivo: PedidoAltaModel.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3\Models\PedidosModels\PedidoAltaModel.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using System.Collections;
using System.Collections.Generic;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.ArticulosPedido;

namespace ObligatorioP3.Web.Models.PedidosModels
{
    public class PedidoAltaModel
    {
        public IEnumerable<ClienteListarDto> clientes { get; set; }
        public IEnumerable<ArticuloListarDto> articulos { get; set; }
        public List<ArticulosPedidoDto> lineas { get; set; }
    }
}

***********************************
Archivo: UsuarioLoginModel.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3\Models\UsuariosModels\UsuarioLoginModel.cs
***********************************
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;

namespace ObligatorioP3.Web.Models.UsuariosModels
{
    public class UsuarioLoginModel
    {
        [Required]
        
        public string Email { get; set; }
        [Required]
        public string Contrasena { get; set; }
    }
}

***********************************
Archivo: ArticuloMappers.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\MapeoDtos\ArticuloMappers.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.InterfacesEntidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos
{
    public class ArticuloMappers
    {
        public static Articulo FromDTO(ArticuloAltaDto dto)
        {
            if (dto == null) throw new ArgumentNullException(nameof(dto));
            Articulo articulo = new Articulo(dto.Nombre, dto.Descripcion, dto.Codigo, dto.Precio, dto.Stock);
            return articulo;
        }

        public static Articulo FromDTO(ArticuloListarDto dto)
        {
            if (dto == null) throw new ArgumentNullException(nameof(dto));
            Articulo articulo = new Articulo(dto.Nombre, dto.Descripcion, dto.Codigo, dto.Precio, dto.Stock);
            return articulo;
        }

        public static ArticuloListarDto ToDto(Articulo art)
        {
            if (art == null) throw new ArgumentNullException("Error, artículo nulo");
            return new ArticuloListarDto()
            {
                Id = art.Id,
                Nombre = art.Nombre,
                Descripcion = art.Descripcion,
                Codigo = art.Codigo,
                Precio = art.Precio,
                Stock = art.Stock,
            };
        }

        public static IEnumerable<ArticuloListarDto> FromLista(IEnumerable<Articulo> articulosOrigen)
        {
            if (articulosOrigen == null || articulosOrigen.Count() == 0) throw new ArgumentNullException("No existen articulos registrados");
            return articulosOrigen.Select(Articulo => ToDto(Articulo));
        }
    }
}

***********************************
Archivo: ArticulosPedidoMappers.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\MapeoDtos\ArticulosPedidoMappers.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.ArticulosPedido;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.Entidades.AssosiationClasses;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos
{
    internal class ArticulosPedidoMappers
    {
        public static ArticulosPedido FromDTO(ArticulosPedidoDto dto)
        {
            if (dto == null) throw new ArgumentNullException(nameof(dto));
            Articulo articulo = new Articulo(dto.ArticuloListarDto.Id, dto.ArticuloListarDto.Nombre, dto.ArticuloListarDto.Descripcion, dto.ArticuloListarDto.Codigo, dto.ArticuloListarDto.Precio, dto.ArticuloListarDto.Stock);
            ArticulosPedido articulosPedido = new ArticulosPedido(dto.PedidoId, articulo, dto.Unidades, dto.PrecioUnitario);
            return articulosPedido;
        }

        public static ArticulosPedidoDto ToDto(ArticulosPedido artPed)
        {
            if (artPed == null) throw new ArgumentNullException("Error, artículo nulo");
            return new ArticulosPedidoDto()
            {
                PedidoId = artPed.PedidoId,
                ArticuloListarDto = ArticuloMappers.ToDto(artPed.Articulo),
                Unidades = artPed.Unidades,
                PrecioUnitario = artPed.PrecioUnitario
            };
        }
    }
}

***********************************
Archivo: ClienteMappers.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\MapeoDtos\ClienteMappers.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos
{
    public class ClienteMappers
    {

        public static ClienteListarDto ToDto(Cliente cli)
        {
            if (cli == null) throw new ArgumentNullException("Error, cli nulo");
            return new ClienteListarDto()
            {
                Id = cli.Id,
                RazonSocial = cli.RazonSocial,
                RUT = cli.RUT,
                Calle = cli.Direccion.Calle,
                Ciudad = cli.Direccion.Ciudad,
                Numero = cli.Direccion.Numero,
                Distancia = cli.Direccion.Distancia
            };
        }

        public static IEnumerable<ClienteListarDto> FromLista(IEnumerable<Cliente> clientesOrigen)
        {
            if (clientesOrigen == null || clientesOrigen.Count() == 0) return null;
            return clientesOrigen.Select(cliente => ToDto(cliente));
        }
    }
}

***********************************
Archivo: MovimientoStockMapper.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\MapeoDtos\MovimientoStockMapper.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.MovimientosStock;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.InterfacesEntidades;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;
using static ObligatorioP3.AccesoDatos.EF.RepositorioMovimientoEF;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos
{
    public class MovimientoStockMapper
    {
        public static MovimientoStock FromDTO(MovimientoStockAltaDTO dto, Articulo articulo, TipoDeMovimiento tipo, Usuario usuario)
        {
            if (dto == null) throw new ArgumentNullException(nameof(dto));
            MovimientoStock movimientoStock = new MovimientoStock(DateTime.Now, dto.IdArticulo, articulo, dto.IdTipo, tipo, usuario.Id, usuario, dto.Cantidad);
            return movimientoStock;
        }

        public static MovimientoListarDTO ToDto(MovimientoStock movimientoStock)
        {
            if (movimientoStock == null) throw new ArgumentNullException("Error, movimiento de stock nulo");
            return new MovimientoListarDTO()
            {
                Id = movimientoStock.Id,
                Fecha = movimientoStock.Fecha,
                IdArticulo = movimientoStock.Articulo.Id,
                IdUsuario = movimientoStock.Usuario.Id,
                Cantidad = movimientoStock.Cantidad,
                IdTipoMovmiento = movimientoStock.Tipo.Id,
                NombreTipoMovimiento = movimientoStock.Tipo.Nombre,
                Aumento = movimientoStock.Tipo.Aumento,
                Coeficiente = movimientoStock.Tipo.Coeficiente
            };
        }

        public static MovimientoListarAgrupadoDTO ToDtoAgrupado(Object movimientoOrigen)
        {
            var anoProperty = movimientoOrigen.GetType().GetProperty("Ano");
            var movimientoCantidadProperty = movimientoOrigen.GetType().GetProperty("MovimientoCantidad");
            var totalProperty = movimientoOrigen.GetType().GetProperty("Total");

            if (anoProperty == null || movimientoCantidadProperty == null || totalProperty == null)
            {
                throw new InvalidOperationException("El objeto no tiene las propiedades esperadas.");
            }

            var ano = (string)anoProperty.GetValue(movimientoOrigen);
            var movimientoCantidad = (IEnumerable<dynamic>)movimientoCantidadProperty.GetValue(movimientoOrigen);
            var total = (int)totalProperty.GetValue(movimientoOrigen);

            var movimientoConvertido = new MovimientoListarAgrupadoDTO
            {
                Ano = ano,
                MovimientoCantidad = movimientoCantidad.Select(mc => new MovimientoCantidadDto
                {
                    Nombre = (string)mc.GetType().GetProperty("Nombre").GetValue(mc),
                    Cantidad = (int)mc.GetType().GetProperty("Cantidad").GetValue(mc)
                }).ToList(),
                Total = total
            };

            return movimientoConvertido;
        }

        public static IEnumerable<MovimientoListarDTO> FromLista(IEnumerable<MovimientoStock> movimientosOrigen)
        {
            if (movimientosOrigen == null || movimientosOrigen.Count() == 0) throw new ArgumentNullException("No existen movimientos de stock registrados");
            return movimientosOrigen.Select(MovimientoStock => ToDto(MovimientoStock));
        }

        public static IEnumerable<MovimientoListarAgrupadoDTO> FromListaAgrupado(IEnumerable<Object> movimientosOrigen)
        {
            if (movimientosOrigen == null || movimientosOrigen.Count() == 0) throw new ArgumentNullException("No existen movimientos de stock registrados");
            var movimientosConvertidos = movimientosOrigen.Select(MovimientoStock => ToDtoAgrupado(MovimientoStock));
            return movimientosConvertidos;
        }
    }
}

***********************************
Archivo: PedidoMappers.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\MapeoDtos\PedidoMappers.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.ArticulosPedido;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.Entidades.AssosiationClasses;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos
{
    internal class PedidoMappers
    {
        public static Pedido FromDTOcomun(PedidoAltaDto dto, decimal iva, decimal recargo)
        {
            if (dto == null) throw new ArgumentNullException(nameof(dto));
            Cliente cliente = new Cliente(dto.ClienteDto.Id, dto.ClienteDto.RazonSocial, dto.ClienteDto.RUT, dto.ClienteDto.Calle, dto.ClienteDto.Ciudad, dto.ClienteDto.Numero, dto.ClienteDto.Distancia);
            List<ArticulosPedido> lineas = new List<ArticulosPedido>();
            foreach (var item in dto.LineasDto)
            {
                ArticulosPedido lineaConvertida = ArticulosPedidoMappers.FromDTO(item);
                lineas.Add(lineaConvertida);
            }
            Pedido pedido = new PedidoComun(dto.FechaEntrega, cliente, lineas, iva, recargo);
            return pedido;
        }

        public static Pedido FromDTOExpress(PedidoAltaDto dto, decimal iva, int plazoExpress, decimal recargo)
        {
            if (dto == null) throw new ArgumentNullException(nameof(dto));
            Cliente cliente = new Cliente(dto.ClienteDto.Id, dto.ClienteDto.RazonSocial, dto.ClienteDto.RUT, dto.ClienteDto.Calle, dto.ClienteDto.Ciudad, dto.ClienteDto.Numero, dto.ClienteDto.Distancia);
            List<ArticulosPedido> lineas = new List<ArticulosPedido>();
            foreach (var item in dto.LineasDto)
            {
                ArticulosPedido lineaConvertida = ArticulosPedidoMappers.FromDTO(item);
                lineas.Add(lineaConvertida);
            }
            Pedido pedido = new PedidoExpress(dto.FechaEntrega, cliente, lineas, iva, plazoExpress, recargo);
            return pedido;
        }

        public static PedidoListarDto ToDto(Pedido ped)
        {
            if (ped == null) throw new ArgumentNullException("Error, pedido nulo");
            return new PedidoListarDto()
            {
                Id = ped.Id,
                FechaEntrega = ped.FechaEntrega,
                FechaEmision = ped.Fecha,
                ClienteDto = ClienteMappers.ToDto(ped.Cliente),
                PrecioFinal = ped.PrecioFinal,
                Anulado = ped.Anulado,
            };
        }

        public static IEnumerable<PedidoListarDto> FromLista(IEnumerable<Pedido> PedidosOrigen)
        {
            if (PedidosOrigen == null || PedidosOrigen.Count() == 0) throw new ArgumentNullException("No existen pedidos de esa fecha");
            return PedidosOrigen.Select(Pedido => ToDto(Pedido));
        }
    }
}

***********************************
Archivo: TipoDeMovimientoMappers.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\MapeoDtos\TipoDeMovimientoMappers.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.TiposDeMovimiento;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos
{
    public class TipoDeMovimientoMappers
    {
        public static TipoDeMovimiento FromDTO(TipoDeMovimientoAltaDTO dto)
        {
            if (dto == null) throw new ArgumentNullException(nameof(dto));
            TipoDeMovimiento nuevo = new TipoDeMovimiento(dto.Nombre,dto.Aumento);
            return nuevo;
        }
        public static TipoDeMovimiento FromDTO(TipoDeMovimientoListarDTO dto)
        {
            if (dto == null) throw new ArgumentNullException(nameof(dto));
            TipoDeMovimiento nuevo = new TipoDeMovimiento(dto.Nombre, dto.Aumento);
            return nuevo;
        }

        public static TipoDeMovimiento FromDTO(TipoDeMovimientoModificacionDto dto)
        {
            if (dto == null) throw new ArgumentNullException(nameof(dto));
            var tipo = new TipoDeMovimiento(dto.Id, dto.Nombre, dto.Aumento);
            return tipo;
        }

        public static TipoDeMovimientoListarDTO ToDto(TipoDeMovimiento tipo)
        {
            if (tipo == null) throw new ArgumentNullException("Error, tipo nulo");
            return new TipoDeMovimientoListarDTO()
            {
                Id = tipo.Id,
                Nombre = tipo.Nombre,
                Aumento = tipo.Aumento,
                Coeficiente = tipo.Coeficiente
            };
        }

        public static IEnumerable<TipoDeMovimientoListarDTO> FromLista(IEnumerable<TipoDeMovimiento> tiposOrigen)
        {
            if (tiposOrigen == null || tiposOrigen.Count() == 0) throw new ArgumentNullException("No existen tipos registrados");
            return tiposOrigen.Select(tipo => ToDto(tipo));
        }
    }
}

***********************************
Archivo: UsuarioMappers.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\MapeoDtos\UsuarioMappers.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.InterfacesEntidades;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos
{
    public class UsuarioMappers
    {
        //FromDTO es una sobrecarga de metodo para capturar cualquier tipo de DTO de Usuario y devolver un objeto Usuario
        public static Usuario FromDTO(UsuarioAltaDto dto)
        {
            if (dto == null) throw new ArgumentNullException(nameof(dto));
            Usuario usuario = new Usuario(dto.Email, dto.Nombre, dto.Apellido, dto.Contrasena, dto.Rol);
            usuario.Contrasena.ContrasenaEncriptada = Usuario.EncriptarContraseña(dto.Contrasena);
            return usuario;
        }

        public static Usuario FromDTO(UsuarioModificacionDto dto)
        {
            if (dto == null) throw new ArgumentNullException(nameof(dto));
            var usuario = new Usuario(dto.Id, dto.Email, dto.Nombre, dto.Apellido, dto.Contrasena,dto.Rol);
            usuario.Contrasena.ContrasenaEncriptada = Usuario.EncriptarContraseña(dto.Contrasena);
            return usuario;
        }

        public static UsuarioListarDto ToDto(Usuario usu)
        {
            if (usu == null) throw new ArgumentNullException("Error, usuario nulo");
            return new UsuarioListarDto()
            {
                Id = usu.Id,
                Email = usu.Email.ValorEmail,
                Nombre = usu.NombreCompleto.Nombre,
                Apellido = usu.NombreCompleto.Apellido,
                Contrasena = usu.Contrasena.ContrasenaNoEncriptada,
                ContrasenaEncriptada = usu.Contrasena.ContrasenaEncriptada,
                Rol = usu.Rol
            };
        }


        public static IEnumerable<UsuarioListarDto> FromLista(IEnumerable<Usuario> usuarios)
        {
            if (usuarios == null || usuarios.Count() == 0) throw new ArgumentNullException("No existen usuarios registrados");
            return usuarios.Select(usuario => ToDto(usuario));
        }
    }
}

***********************************
Archivo: AltaArticulo.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Articulos\AltaArticulo.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Articulos;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Articulos
{
    public class AltaArticulo : IAltaArticulo
    {
        private IRepositorioArticulo _repositorioArticulo;
        public AltaArticulo(IRepositorioArticulo repo)
        {
            _repositorioArticulo = repo;
        }

        /// <summary>
        /// Mappea el dto a Entidad y lo manda al método Add del repositorio de artículos
        /// </summary>
        /// <param name="dto"></param>
        public void Ejecutar(ArticuloAltaDto dto)
        {
            if (dto == null)
            {
                throw new ArgumentNullException("Articulo nulo");
            }

            Articulo articulo = ArticuloMappers.FromDTO(dto);
            _repositorioArticulo.Add(articulo);
        }
    }
}

***********************************
Archivo: GetAllArticulos.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Articulos\GetAllArticulos.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Articulos;
using ObligatorioP3.LogicaNegocio.Excepciones.Usuario;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Articulos
{
    public class GetAllArticulos : IGetAllArticulos
    {
        private IRepositorioArticulo _repositorioArticulo;
        public GetAllArticulos(IRepositorioArticulo repo)
        {
            _repositorioArticulo = repo;
        }

        /// <summary>
        /// Llama al repositorio y trae todos los artículos, los mapea en un IEnumerable de DTO y los devuelve
        /// </summary>
        public IEnumerable<ArticuloListarDto> Ejecutar()
        {
            var articulosOrigen = _repositorioArticulo.GetAll();
            if (articulosOrigen == null || articulosOrigen.Count() == 0)
            {
                throw new Exception("No hay articulos registrados");
            }
            return ArticuloMappers.FromLista(articulosOrigen);
        }
    }
}

***********************************
Archivo: GetArticulo.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Articulos\GetArticulo.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Articulos;
using ObligatorioP3.LogicaNegocio.Excepciones.Usuario;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Articulos
{
    public class GetArticulo : IGetArticulo
    {
        private IRepositorioArticulo _repositorioArticulo;
        public GetArticulo(IRepositorioArticulo repo)
        {
            _repositorioArticulo = repo;
        }

        /// <summary>
        /// Recibe el id de Artículo por parámetro y lo manda a traer desde el repositorio, lo mapea a DTO y lo devuelve
        /// </summary>
        /// <param name="id"></param>
        public ArticuloListarDto Ejecutar(int? id)
        {
            var articuloOrigen = _repositorioArticulo.GetById(id);
            if (articuloOrigen == null)
            {
                throw new Exception("No existe el artículo");
            }
            return ArticuloMappers.ToDto(articuloOrigen);
        }
    }
}

***********************************
Archivo: GetArticulosConMovimientosSegunFechas.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Articulos\GetArticulosConMovimientosSegunFechas.cs
***********************************
using Libreria.LogicaNegocio.InterfacesRepositorios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Articulos;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Articulos
{
    public class GetArticulosConMovimientosSegunFechas : IGetArticulosConMovimientosSegunFechas
    {
        private IRepositorioArticulo _repositorioArticulo;
        private IRepositorioParametro _repositorioParametro;
        public GetArticulosConMovimientosSegunFechas(IRepositorioArticulo repo, IRepositorioParametro repositorioParametro)
        {
            _repositorioArticulo = repo;
            _repositorioParametro = repositorioParametro;
        }
        public IEnumerable<ArticuloListarDto> Ejecutar(DateTime fecha1, DateTime fecha2, int pagina)
        {
            try
            {
                var param = _repositorioParametro.GetParametro("cantidadRegistros");
                int cantidadRegistros = int.Parse(param.Valor);
                var articulosFiltrados = _repositorioArticulo.GetArticulosConMovimientosSegunFechas(fecha1, fecha2, pagina, cantidadRegistros);
                var articulosListarDTO = ArticuloMappers.FromLista(articulosFiltrados);
                
                return articulosListarDTO;
            }
            catch (Exception ex)
            {

                throw;
            }
        }
    }
}

***********************************
Archivo: FiltrarClientes.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Clientes\FiltrarClientes.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Clientes;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Clientes
{
    public class FiltrarClientes : IFiltrarClientes
    {
        private IRepositorioCliente _repositorioCliente;

        public FiltrarClientes(IRepositorioCliente repo)
        {
            _repositorioCliente = repo;
        }
        /// <summary>
        /// Llama al metodo filtrarXTexto del repositorio
        /// </summary>
        /// <param name="txt">Texto a filtrar por la razon social</param>
        /// <returns>IEnumerable de ClienteListarDto para mostrar en la view</returns>
        public IEnumerable<ClienteListarDto> FiltrarXTexto(string txt)
        {
            var clientesFiltrados = _repositorioCliente.FiltrarXTexto(txt);

            return ClienteMappers.FromLista(clientesFiltrados);
        }

        /// <summary>
        /// Llama al metodo filtrarXMonto del repositorio
        /// </summary>
        /// <param name="txt">Texto a filtrar por la razon social</param>
        /// <returns>IEnumerable de ClienteListarDto para mostrar en la view</returns>
        public IEnumerable<ClienteListarDto> FiltrarXMonto (decimal money)
        {
            var clientesFiltrados = _repositorioCliente.FiltrarXMonto(money);
            return ClienteMappers.FromLista(clientesFiltrados);
        }
    }
}

***********************************
Archivo: GetAllClientes.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Clientes\GetAllClientes.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Clientes;
using ObligatorioP3.LogicaNegocio.Excepciones.Usuario;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Clientes
{
    public class GetAllClientes:IGetAllClientes
    {
        private IRepositorioCliente _repositorioCliente;
        public GetAllClientes(IRepositorioCliente repo)
        {
            _repositorioCliente= repo;
        }
        /// <summary>
        /// Ejecuta el metodo GetAll del repositorio y mapea a los clientes a una lista de ClientesDTO
        /// </summary>
        /// <returns>Una lista de ClienteListarDto hecha a partir de todos los clientes del sistema</returns>
        public IEnumerable<ClienteListarDto> Ejecutar()
        {
            var clientesOrigen = _repositorioCliente.GetAll();
            if (clientesOrigen == null || clientesOrigen.Count() == 0)
            {
                throw new Exception("No hay clientes registrados");
            }
            return ClienteMappers.FromLista(clientesOrigen);
        }
    }
}

***********************************
Archivo: GetCliente.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Clientes\GetCliente.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Clientes;
using ObligatorioP3.LogicaNegocio.Excepciones.Usuario;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Clientes
{
    public class GetCliente: IGetCliente
    {
        private IRepositorioCliente _repositorioCliente;
        public GetCliente(IRepositorioCliente repo)
        {
            _repositorioCliente= repo;
        }
        public ClienteListarDto Ejecutar(int? id)
        {
            var clienteOrigen = _repositorioCliente.GetById(id);
            if (clienteOrigen == null)
            {
                throw new Exception("Existe el Cliente");
            }
            return ClienteMappers.ToDto(clienteOrigen);
        }
    }
}

***********************************
Archivo: AltaMovimiento.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\MovimientosStock\AltaMovimiento.cs
***********************************
using Libreria.LogicaNegocio.Entidades.ParametrosConfigurables;
using Libreria.LogicaNegocio.InterfacesRepositorios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.MovimientosStock;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.MovimientosStock;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.MovimientosStock
{
    public class AltaMovimiento : IAltaMovimientoStock
    {
        private IRepositorioMovimiento _repositorioMovimientoStock;
        private IRepositorioUsuario _repositorioUsuario;
        private IRepositorioArticulo _repositorioArticulo;
        private IRepositorioTipoDeMovimientoEF _repositorioTipoDeMovimiento;

        private IRepositorioParametro _repositorioParametro;

        public AltaMovimiento(IRepositorioMovimiento repo, IRepositorioUsuario repositorioUsuario, IRepositorioArticulo repositorioArticulo, IRepositorioTipoDeMovimientoEF repositorioTipoDeMovimiento, IRepositorioParametro repositorioParametro)
        {
            _repositorioMovimientoStock = repo;
            _repositorioUsuario = repositorioUsuario;
            _repositorioArticulo = repositorioArticulo;
            _repositorioTipoDeMovimiento = repositorioTipoDeMovimiento;
            _repositorioParametro = repositorioParametro;
        }

        public void Ejecutar(MovimientoStockAltaDTO dto)
        {
            if (dto == null)
            {
                throw new ArgumentNullException("Movimiento nulo");
            }
            Parametro topeParametro= _repositorioParametro.GetParametro("topeMovimiento");
            int tope = int.Parse(topeParametro.Valor);
            if (dto.Cantidad > tope) throw new Exception("Tope supera el valor permitido");
            Usuario usuario = _repositorioUsuario.GetByEmail(dto.emailUsuario);
            Articulo articulo = _repositorioArticulo.GetById(dto.IdArticulo);
            TipoDeMovimiento tipo = _repositorioTipoDeMovimiento.GetById(dto.IdTipo);
            MovimientoStock movimiento = MovimientoStockMapper.FromDTO(dto, articulo, tipo, usuario);
            _repositorioMovimientoStock.Add(movimiento);
        }
    }
}

***********************************
Archivo: FiltrarMovimientos.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\MovimientosStock\FiltrarMovimientos.cs
***********************************
using Libreria.LogicaNegocio.InterfacesRepositorios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.MovimientosStock;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.MovimientosStock;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.MovimientosStock
{
    public class FiltrarMovimientos : IFiltrarMovimientos
    {
        private IRepositorioMovimiento _repositorioMovimientoStock;
        private IRepositorioParametro _repositorioParametro;
        public FiltrarMovimientos(IRepositorioMovimiento repo, IRepositorioParametro repositorioParametro)
        {
            _repositorioMovimientoStock = repo;
            _repositorioParametro = repositorioParametro;
        }

        public IEnumerable<MovimientoListarDTO> Ejecutar(int idArticulo, int idTipo, int pagina)
        {
            try
            {
                var param = _repositorioParametro.GetParametro("cantidadRegistros");
                int cantidadRegistros = int.Parse(param.Valor);
                var MovimientosFiltrados = _repositorioMovimientoStock.Filtrar(idArticulo, idTipo, pagina, cantidadRegistros);
                if(MovimientosFiltrados.Count() == 0) { throw new Exception("No existen movimientos asociados a esos IDs"); }
                return MovimientoStockMapper.FromLista(MovimientosFiltrados);
            }catch (Exception ex)
            {
                throw;
            }
        }


    }
}

***********************************
Archivo: ListarResumenMovimientos.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\MovimientosStock\ListarResumenMovimientos.cs
***********************************
using Libreria.LogicaNegocio.InterfacesRepositorios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.MovimientosStock;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.MovimientosStock;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.MovimientosStock
{
    public class ListarResumenMovimientos : IListarResumenMovimientos
    {
        private IRepositorioMovimiento _repositorioMovimientoStock;
        public ListarResumenMovimientos(IRepositorioMovimiento repo)
        {
            _repositorioMovimientoStock = repo;
        }

        public IEnumerable<MovimientoListarAgrupadoDTO> Ejecutar()
        {
            var listaOrigen = _repositorioMovimientoStock.GetGrouped();
            if (listaOrigen == null)
            {
                throw new Exception("No hay movimientos registrados");
            } 
            return MovimientoStockMapper.FromListaAgrupado(listaOrigen);
        }
    }
}

***********************************
Archivo: AltaPedido.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Pedidos\AltaPedido.cs
***********************************
using Libreria.LogicaNegocio.Entidades.ParametrosConfigurables;
using Libreria.LogicaNegocio.InterfacesRepositorios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Pedidos
{
    public class AltaPedido : IAltaPedido
    {
        private IRepositorioPedido _repositorioPedido;
        private IRepositorioParametro _repositorioParametro;
        public AltaPedido(IRepositorioPedido repo, IRepositorioParametro repoParam)
        {
            _repositorioPedido = repo;
            _repositorioParametro = repoParam;
        }

        /// <summary>
        /// Mapea el pedido de DTO a Entidad, consulta los parámetros configurables y lo envía al repositorio para agregarlo a la base de datos
        /// </summary>
        /// <param name="dto">Es el pedido en formato DTO</param>
        /// <param name="esExpress">Un valor booleano que se utiliza para diferenciar si es express o común y ejecutar una lógica distinta en cada uno</param>
        public void Ejecutar(PedidoAltaDto dto, bool esExpress)
        {
            if (dto == null)
            {
                throw new ArgumentNullException("Pedido nulo");
            }

            Parametro iva = _repositorioParametro.GetParametro("iva");
            decimal valorIva = decimal.Parse(iva.Valor);
            Parametro plazo = _repositorioParametro.GetParametro("plazoExpress");
            int plazoExpress = int.Parse(plazo.Valor);
            

            if (!esExpress) 
            {
                Parametro recargoComun = null;
                decimal valorRecargoComun = 1;
                if(dto.ClienteDto.Distancia > 100)
                {
                    recargoComun = _repositorioParametro.GetParametro("recargoComun");
                }
                if (recargoComun != null)
                {
                    valorRecargoComun = decimal.Parse(recargoComun.Valor);
                }
                Pedido pedido = PedidoMappers.FromDTOcomun(dto, valorIva, valorRecargoComun);
                _repositorioPedido.Add(pedido);
            }
            else if (esExpress)
            {
                Parametro recargoExpress = null;
                if(dto.FechaEntrega.Date == DateTime.Today.Date)
                {
                    recargoExpress = _repositorioParametro.GetParametro("recargoExpressB");
                }
                else
                {
                    recargoExpress = _repositorioParametro.GetParametro("recargoExpressA");
                }
                
                decimal valorRecargoExpress = decimal.Parse(recargoExpress.Valor);
                Pedido pedido = PedidoMappers.FromDTOExpress(dto, valorIva, plazoExpress, valorRecargoExpress);
                pedido.EsValido();
                _repositorioPedido.Add(pedido);
            }
        }
    }
}

***********************************
Archivo: AnularPedido.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Pedidos\AnularPedido.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Libreria.LogicaNegocio.Entidades.ParametrosConfigurables;
using Libreria.LogicaNegocio.InterfacesRepositorios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Pedidos
{
    public class AnularPedido : IAnularPedido
    {
        private IRepositorioPedido _repositorioPedido;
        public AnularPedido(IRepositorioPedido repo)
        {
            _repositorioPedido = repo;
        }

        /// <summary>
        /// Manda a llamar el método Anular en el repositorio
        /// </summary>
        /// <param name="id">Id del pedido que se quiere anular</param>
        public void Ejecutar(int id)
        {
            _repositorioPedido.Anular(id);
        }
    }
}

***********************************
Archivo: FiltrarPedidos.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Pedidos\FiltrarPedidos.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Net.Mime.MediaTypeNames;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Pedidos
{
    public class FiltrarPedidos : IFiltrarPedidos
    {
        private IRepositorioPedido _repositorioPedido;
        public FiltrarPedidos(IRepositorioPedido repo)
        {
            _repositorioPedido = repo;
        }

        /// <summary>
        /// Llama al método del repositorio que filtra los pedidos no entregados según la fecha de emisión
        /// </summary>
        /// <param name="date">Fecha de emisión</param>
        /// <returns>IEnumerable de pedidos en formato DTO</returns>
        public IEnumerable<PedidoListarDto> Filtrar(DateTime date)
        {
            var PedidosFiltrados = _repositorioPedido.Filtrar(date);

            return PedidoMappers.FromLista(PedidosFiltrados);
        }
    }
}

***********************************
Archivo: GetAllPedidos.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Pedidos\GetAllPedidos.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos;
using ObligatorioP3.LogicaNegocio.Excepciones.Usuario;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Pedidos
{
    public class GetAllPedidos : IGetAllPedidos
    {
        private IRepositorioPedido _repositorioPedido;
        public GetAllPedidos(IRepositorioPedido repo)
        {
            _repositorioPedido = repo;
        }

        /// <summary>
        /// Manda a traer del repositorio todos los pedidos
        /// </summary>
        /// <returns>Devuelve un IEnumerable de pedidos en formato DTO</returns>
        public IEnumerable<PedidoListarDto> Ejecutar()
        {
            var pedidosOrigen = _repositorioPedido.GetAll();
            if (pedidosOrigen == null || pedidosOrigen.Count() == 0)
            {
                throw new Exception("No hay pedidos registrados");
            }
            return PedidoMappers.FromLista(pedidosOrigen);
        }
    }
}

***********************************
Archivo: GetAllPedidosAnulados.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Pedidos\GetAllPedidosAnulados.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos;
using ObligatorioP3.LogicaNegocio.Excepciones.Usuario;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Pedidos
{
    public class GetAllPedidosAnulados : IGetAllPedidosAnulados
    {
        private IRepositorioPedido _repositorioPedido;
        public GetAllPedidosAnulados(IRepositorioPedido repo)
        {
            _repositorioPedido = repo;
        }

        /// <summary>
        /// Manda a traer del repositorio todos los pedidos anulados
        /// </summary>
        /// <returns>Devuelve un IEnumerable de pedidos en formato DTO</returns>
        public IEnumerable<PedidoListarDto> Ejecutar()
        {
            var pedidosOrigen = _repositorioPedido.GetAllAnulados();
            if (pedidosOrigen == null || pedidosOrigen.Count() == 0)
            {
                throw new Exception("No hay pedidos anulados (excepcion interna)");
            }
            return PedidoMappers.FromLista(pedidosOrigen);
        }
    }
}

***********************************
Archivo: GetPedido.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Pedidos\GetPedido.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Pedidos
{
    public class GetPedido : IGetPedido
    {
        private IRepositorioPedido _repositorioPedido;
        public GetPedido(IRepositorioPedido repo)
        {
            _repositorioPedido = repo;
        }

        /// <summary>
        /// Manda a traer del repositorio 1 pedido que coincida con la id que recibe
        /// </summary>
        /// <param name="id">id del pedido que se quiere traer</param>
        /// <returns>El pedido en formato DTO</returns>
        public PedidoListarDto GetById(int? id)
        {
            var pedido = _repositorioPedido.GetById(id);
            if (pedido == null) throw new Exception("Error, no existe ningun pedido con esa id");
            var pedidoDto = PedidoMappers.ToDto(pedido);
            return pedidoDto;
        }
    }
}

***********************************
Archivo: AltaTipoDeMovimiento.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\TiposDeMovimiento\AltaTipoDeMovimiento.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.TiposDeMovimiento;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.TiposDeMovimiento
{
    public class AltaTipoDeMovimiento : IAltaMovimiento
    {
        private IRepositorioTipoDeMovimientoEF _repo;

        public AltaTipoDeMovimiento(IRepositorioTipoDeMovimientoEF repo)
        {
            _repo = repo;
        }
        /// <summary>
        /// Mappea el UsuarioAltaDto en un Usuario, encripta su contraseña,llama al metodo Add del repositorioEF de Usuario.
        /// </summary>
        /// <param name="dto"></param>
        public void Ejecutar(TipoDeMovimientoAltaDTO dto)
        {
            if (dto == null)
            {
                throw new ArgumentNullException("TipoDeMovimiento nulo");
            }
            if (dto.Aumento &&!dto.Nombre.Contains(" (I)")) {
                dto.Nombre += " (I)";
            }
            if (!dto.Aumento && !dto.Nombre.Contains(" (E)"))
            {
                dto.Nombre += " (E)";
            }
            TipoDeMovimiento tipo = TipoDeMovimientoMappers.FromDTO(dto);
                _repo.Add(tipo);


        }
    }
}

***********************************
Archivo: BorrarTipoDeMovimiento.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\TiposDeMovimiento\BorrarTipoDeMovimiento.cs
***********************************
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.TiposDeMovimiento
{
    public class BorrarTipoDeMovimiento : IBorrarTipoDeMovimiento
    {
        private IRepositorioTipoDeMovimientoEF _repo;
        public BorrarTipoDeMovimiento(IRepositorioTipoDeMovimientoEF repo)
        {
            _repo = repo;
        }
        public void Ejecutar(int id)
        {
            _repo.Remove(id);
        }
    }
}

***********************************
Archivo: EditarTipoDeMovimiento.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\TiposDeMovimiento\EditarTipoDeMovimiento.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.TiposDeMovimiento;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.TiposDeMovimiento
{
    public class EditarTipoDeMovimiento : IEditarTipoDeMovimiento
    {
        private IRepositorioTipoDeMovimientoEF _repo;
        public EditarTipoDeMovimiento(IRepositorioTipoDeMovimientoEF repo)
        {
            _repo = repo;
        }
        /// <summary>
        /// Caso de uso de modificar.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="tipoModificado"></param>
        public void Ejecutar(int id, TipoDeMovimientoModificacionDto tipoModificado)
        {
            if (tipoModificado.Aumento && !tipoModificado.Nombre.Contains(" (I)"))
            {
                tipoModificado.Nombre += " (I)";
            }
            if (!tipoModificado.Aumento && !tipoModificado.Nombre.Contains(" (E)"))
            {
                tipoModificado.Nombre += " (E)";
            }
            TipoDeMovimiento tipo = TipoDeMovimientoMappers.FromDTO(tipoModificado);
            _repo.Update(id, tipo);
        }
    }
}

***********************************
Archivo: GetTipoDeMovimiento.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\TiposDeMovimiento\GetTipoDeMovimiento.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.TiposDeMovimiento;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaNegocio.Excepciones.TipoDeMovimiento;
using ObligatorioP3.LogicaNegocio.Excepciones.Usuario;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.TiposDeMovimiento
{
    public class GetTipoDeMovimiento : IGetTipoDeMovimiento
    {
        private IRepositorioTipoDeMovimientoEF _repo;

        public GetTipoDeMovimiento(IRepositorioTipoDeMovimientoEF repo)
        {
            _repo = repo;
        }

        public IEnumerable<TipoDeMovimientoListarDTO> GetAll()
        {
            var tipos = _repo.GetAll();
            if (!tipos.Any()) throw new Exception("No hay tipos de movimiento");
            var tiposDTO = TipoDeMovimientoMappers.FromLista(tipos);
            return tiposDTO;
        }

        public TipoDeMovimientoListarDTO GetById(int? id)
        {
            var tipo = _repo.GetById(id);
            if (tipo == null) throw new TipoDeMovimientoNoValidoException("Error, no existe ningun tipo con esa id");
            var tipoDTO = TipoDeMovimientoMappers.ToDto(tipo);
            return tipoDTO;
        }

    }
}

***********************************
Archivo: AltaUsuario.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Usuarios\AltaUsuario.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.Entidades.ValueObjects.Comun;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Usuarios
{
    public class AltaUsuario : IAltaUsuario
    {
        private IRepositorioUsuario _repositorioUsuario;
        
        public AltaUsuario(IRepositorioUsuario repo)
        {
            _repositorioUsuario = repo;
        }
        /// <summary>
        /// Mappea el UsuarioAltaDto en un Usuario, encripta su contraseña,llama al metodo Add del repositorioEF de Usuario.
        /// </summary>
        /// <param name="dto"></param>
        public void Ejecutar(UsuarioAltaDto dto)
        {
            if (dto == null)
            {
                throw new ArgumentNullException("Usuario nulo");
            }

            if (_repositorioUsuario.GetByEmail(dto.Email) == null)
            {
                Usuario usuario = UsuarioMappers.FromDTO(dto);
                usuario.Contrasena.ContrasenaEncriptada = Usuario.EncriptarContraseña(usuario.Contrasena.ContrasenaNoEncriptada);
                _repositorioUsuario.Add(usuario);
            }
            else
            {
                throw new Exception("Ya existe un usuario con ese email en el sistema.");
            }
                

        }
        

    }
}

***********************************
Archivo: EliminarUsuario.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Usuarios\EliminarUsuario.cs
***********************************
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Usuarios
{
    public class EliminarUsuario:IEliminarUsuario
    {
        private IRepositorioUsuario _repositorioUsuario;
        public EliminarUsuario(IRepositorioUsuario repo)
        {
            _repositorioUsuario = repo;
        }
        public void Ejecutar(int id)
        {
            _repositorioUsuario.Remove(id);
        }
    }
}

***********************************
Archivo: GetAllUsuarios.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Usuarios\GetAllUsuarios.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios;
using ObligatorioP3.LogicaNegocio.Excepciones.Usuario;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Usuarios
{
    public class GetAllUsuarios:IGetAllUsuarios
    {
        private IRepositorioUsuario _repositorioUsuario;
        public GetAllUsuarios(IRepositorioUsuario repo)
        {
            _repositorioUsuario = repo;
        }
        public IEnumerable<UsuarioListarDto> Ejecutar()
        {
            var usuariosOrigen = _repositorioUsuario.GetAll();
            if(usuariosOrigen == null || usuariosOrigen.Count() == 0)
            {
                throw new UsuarioNoValidoException("No hay usuarios registrados");
            }
            return UsuarioMappers.FromLista(usuariosOrigen);
        }
    }
}

***********************************
Archivo: GetUsuario.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Usuarios\GetUsuario.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.Excepciones.Usuario;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Usuarios
{
    public class GetUsuario:IGetUsuario
    {
        private IRepositorioUsuario _repositorioUsuario;

        public GetUsuario(IRepositorioUsuario repo)
        {
            _repositorioUsuario = repo;
        }
        public UsuarioListarDto GetById(int? id)
        {
            var usuario = _repositorioUsuario.GetById(id);
            if (usuario == null) throw new UsuarioNoValidoException("Error, no existe ningun usuario con esa id");
            var usuarioDto = UsuarioMappers.ToDto(usuario);
            return usuarioDto;
        }
    }
}

***********************************
Archivo: LoginAPI.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Usuarios\LoginAPI.cs
***********************************
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Usuarios
{
    public class LoginAPI : ILoginAPI
    {
        private IRepositorioUsuario _repo;
        public LoginAPI(IRepositorioUsuario repo)
        {
            _repo = repo;
        }

        public Usuario? Ejecutar(string email, string contra)
        {
            Usuario? usuEncontrado = _repo.GetByEmail(email);
            if (usuEncontrado != null)
            {
                if (usuEncontrado.Contrasena.ContrasenaEncriptada == Usuario.EncriptarContraseña(contra))
                {
                    return usuEncontrado;
                }
                return null;
            }
            else
            {
                return null;
            }
        }
    }
}

***********************************
Archivo: LoginUsuario.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Usuarios\LoginUsuario.cs
***********************************
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Usuarios
{
    public class LoginUsuario : ILoginUsuario
    {
        private IRepositorioUsuario _repositorioUsuario;
        public LoginUsuario(IRepositorioUsuario repo)
        {
            _repositorioUsuario = repo;
        }
        /// <summary>
        /// Valida que los datos ingresados conincidan con un usuario del sistema.
        /// </summary>
        /// <param name="email">Email</param>
        /// <param name="contra">En este caso la contraseña llega sin encriptar, se la encripta y compara a la contraseña encriptada del usuario encontrado.</param>
        /// <returns></returns>
        public Usuario? Ejecutar(string email, string contra)
        {
            Usuario? usuEncontrado = _repositorioUsuario.GetByEmail(email);
            if (usuEncontrado != null)
            {
                if(usuEncontrado.Contrasena.ContrasenaEncriptada == Usuario.EncriptarContraseña(contra))
                {
                    return usuEncontrado;
                }
                return null;
            }
            else
            {
                return null;
            }
        }
    }
}

***********************************
Archivo: ModificarUsuario.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\ImplementacionCasosUso\Usuarios\ModificarUsuario.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.MapeoDtos;
using ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.InterfacesRepositorios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.Usuarios
{
    public class ModificarUsuario:IModificarUsuario
    {
        private IRepositorioUsuario _repositorioUsuario;
        public ModificarUsuario(IRepositorioUsuario repo)
        {
            _repositorioUsuario = repo;
        }
        /// <summary>
        /// Caso de uso de modificar, se hardcodea el rol y email pues son inmutables desde la creacion del usuario original.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="usuModificado"></param>
        public void Ejecutar(int id, UsuarioModificacionDto usuModificado)
        {
            Usuario usuarioSinModificar = _repositorioUsuario.GetById(id);
            usuModificado.Rol = usuarioSinModificar.Rol;
            usuModificado.Email = usuarioSinModificar.Email.ValorEmail;
            Usuario usuario = UsuarioMappers.FromDTO(usuModificado);
            _repositorioUsuario.Update(id, usuario);
        }
    }
}

***********************************
Archivo: IAltaArticulo.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Articulos\IAltaArticulo.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Articulos
{
    public interface IAltaArticulo
    {
        void Ejecutar(ArticuloAltaDto dto);
    }
}

***********************************
Archivo: IGetAllArticulos.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Articulos\IGetAllArticulos.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Articulos
{
    public interface IGetAllArticulos
    {
        public IEnumerable<ArticuloListarDto> Ejecutar();
    }
}

***********************************
Archivo: IGetArticulo.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Articulos\IGetArticulo.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Articulos
{
    public interface IGetArticulo
    {
        public ArticuloListarDto Ejecutar(int? id);
    }
}

***********************************
Archivo: IGetArticulosConMovimientosSegunFechas.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Articulos\IGetArticulosConMovimientosSegunFechas.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Articulos
{
    public interface IGetArticulosConMovimientosSegunFechas
    {
        IEnumerable<ArticuloListarDto> Ejecutar(DateTime fecha1, DateTime fecha2, int pagina);
    }
}

***********************************
Archivo: IFiltrarClientes.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Clientes\IFiltrarClientes.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Clientes
{
    public interface IFiltrarClientes
    {
        public IEnumerable<ClienteListarDto> FiltrarXTexto(string txt);
        public IEnumerable<ClienteListarDto> FiltrarXMonto(decimal money);
    }
}

***********************************
Archivo: IGetAllClientes.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Clientes\IGetAllClientes.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Clientes
{
    public interface IGetAllClientes
    {
        public IEnumerable<ClienteListarDto> Ejecutar();
    }
}

***********************************
Archivo: IGetCliente.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Clientes\IGetCliente.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Clientes
{
    public interface IGetCliente
    {
        public ClienteListarDto Ejecutar(int? id);
    }
}

***********************************
Archivo: IAltaMovimiento.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\MovimientosStock\IAltaMovimiento.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.MovimientosStock;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.MovimientosStock
{
    public interface IAltaMovimientoStock
    {
        public void Ejecutar(MovimientoStockAltaDTO dto);
    }
}

***********************************
Archivo: IFiltrarMovimientos.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\MovimientosStock\IFiltrarMovimientos.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.MovimientosStock;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.MovimientosStock
{
    public interface IFiltrarMovimientos
    {
        public IEnumerable<MovimientoListarDTO> Ejecutar(int idArticulo, int idTipo, int pagina);
    }
}

***********************************
Archivo: IListarResumenMovimientos.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\MovimientosStock\IListarResumenMovimientos.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.MovimientosStock;
using ObligatorioP3.LogicaAplicacion.ImplementacionCasosUso.MovimientosStock;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.MovimientosStock
{
    public interface IListarResumenMovimientos
    {
        public IEnumerable<MovimientoListarAgrupadoDTO>  Ejecutar();
    }
}

***********************************
Archivo: IAltaPedido.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Pedidos\IAltaPedido.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos
{
    public interface IAltaPedido
    {
        public void Ejecutar(PedidoAltaDto dto, bool esExpress);
    }
}

***********************************
Archivo: IAnularPedido.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Pedidos\IAnularPedido.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos
{
    public interface IAnularPedido
    {
        public void Ejecutar(int id);
    }
}

***********************************
Archivo: IFiltrarPedidos.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Pedidos\IFiltrarPedidos.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos
{
    public interface IFiltrarPedidos
    {
        public IEnumerable<PedidoListarDto> Filtrar(DateTime date);
    }
}

***********************************
Archivo: IGetAllPedidos.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Pedidos\IGetAllPedidos.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos
{
    public interface IGetAllPedidos
    {
        public IEnumerable<PedidoListarDto> Ejecutar();
    }
}

***********************************
Archivo: IGetAllPedidosAnulados.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Pedidos\IGetAllPedidosAnulados.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos
{
    public interface IGetAllPedidosAnulados
    {
        public IEnumerable<PedidoListarDto> Ejecutar();
    }
}

***********************************
Archivo: IGetPedido.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Pedidos\IGetPedido.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Pedidos
{
    public interface IGetPedido
    {
        public PedidoListarDto GetById(int? id);
    }
}

***********************************
Archivo: IAltaTipoDeMovimiento.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\TiposDeMovimiento\IAltaTipoDeMovimiento.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.TiposDeMovimiento;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.TiposDeMovimiento
{
    public interface IAltaMovimiento
    {
        public void Ejecutar(TipoDeMovimientoAltaDTO dto);
    }
}

***********************************
Archivo: IBorrarTipoDeMovimiento.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\TiposDeMovimiento\IBorrarTipoDeMovimiento.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.TiposDeMovimiento
{
    public interface IBorrarTipoDeMovimiento
    {
        public void Ejecutar(int id);
    }
}

***********************************
Archivo: IEditarTipoDeMovimiento.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\TiposDeMovimiento\IEditarTipoDeMovimiento.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.TiposDeMovimiento;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.TiposDeMovimiento
{
    public interface IEditarTipoDeMovimiento
    {
        void Ejecutar(int id, TipoDeMovimientoModificacionDto tipoModificado);
    }
}

***********************************
Archivo: IGetTipoDeMovimiento.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\TiposDeMovimiento\IGetTipoDeMovimiento.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.TiposDeMovimiento;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.TiposDeMovimiento
{
    public interface IGetTipoDeMovimiento
    {
        TipoDeMovimientoListarDTO GetById(int? id);
        IEnumerable<TipoDeMovimientoListarDTO> GetAll();
    }
}

***********************************
Archivo: IAltaUsuario.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Usuarios\IAltaUsuario.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios
{
    public interface IAltaUsuario
    {
        void Ejecutar(UsuarioAltaDto dto);
    }
}

***********************************
Archivo: IEliminarUsuario.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Usuarios\IEliminarUsuario.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios
{
    public interface IEliminarUsuario
    {
        public void Ejecutar(int id);
    }
}

***********************************
Archivo: IGetAllUsuarios.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Usuarios\IGetAllUsuarios.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios
{
    public interface IGetAllUsuarios
    {
        public IEnumerable<UsuarioListarDto> Ejecutar();
    }
}

***********************************
Archivo: IGetUsuario.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Usuarios\IGetUsuario.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios
{
    public interface IGetUsuario
    {

        public UsuarioListarDto GetById(int? id);

    }
}

***********************************
Archivo: ILoginAPI.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Usuarios\ILoginAPI.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios
{
    public interface ILoginAPI
    {
        public Usuario? Ejecutar(string email, string contrasena);
    }
}

***********************************
Archivo: ILoginUsuario.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Usuarios\ILoginUsuario.cs
***********************************
using Microsoft.Extensions.Primitives;
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios
{
    public interface ILoginUsuario
    {
        public Usuario? Ejecutar(string email, string contra);
    }
}

***********************************
Archivo: IModificarUsuario.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\InterfacesCasosUso\Usuarios\IModificarUsuario.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.InterfacesCasosUso.Usuarios
{
    public interface IModificarUsuario
    {
        public void Ejecutar(int id, UsuarioModificacionDto usuModificado);
    }
}

***********************************
Archivo: ArticulosPedido.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Entidades\AssosiationClasses\ArticulosPedido.cs
***********************************
using Microsoft.EntityFrameworkCore;
using ObligatorioP3.LogicaNegocio.InterfacesEntidades;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Entidades.AssosiationClasses
{
    public class ArticulosPedido : IValidable<ArticulosPedido>
    {
        /*Prop de navegacion*/
        [ForeignKey("Pedido")]
        public int PedidoId { get; set; }
        public Articulo Articulo { get; set; }
        public int Unidades { get; set; }
        public decimal PrecioUnitario { get; set; }
        public ArticulosPedido(int pedidoId, Articulo articulo, int unidades, decimal precioUnitario) 
        {
            PedidoId = pedidoId;
            Articulo = articulo;
            Unidades = unidades;
            PrecioUnitario = precioUnitario;
            EsValido();
        }

        public ArticulosPedido()
        {
            
        }
        public void EsValido()
        {
            if(Articulo.Stock < Unidades) { throw new ArgumentException($"No hay suficiente stock del artículo: {Articulo.Nombre}. Stock disponible: {Articulo.Stock}"); }
        }
    }
}

***********************************
Archivo: Usuario.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Entidades\EntidadDeAutenticacion\Usuario.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.ValueObjects.Comun;
using ObligatorioP3.LogicaNegocio.Entidades.ValueObjects.Usuario;
using ObligatorioP3.LogicaNegocio.Excepciones.Comun;
using ObligatorioP3.LogicaNegocio.Excepciones.NombreCompleto;
using ObligatorioP3.LogicaNegocio.Excepciones.Usuario;
using ObligatorioP3.LogicaNegocio.InterfacesEntidades;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.InteropServices;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion
{
    public class Usuario : IEntity, IValidable<Usuario>, IUsuario
    {
        #region Propiedades y constructores
        public int Id { get; set; }
        [Required, StringLength(1000, MinimumLength = 6)]
        public Email Email { get; set; }
        [Required, StringLength(1000, MinimumLength = 2)]
        public NombreCompleto NombreCompleto { get; set; }
        [Required]
        public Contrasena Contrasena { get; set; }
        [Required]
        public string Rol { get; set; }

        public Usuario()
        {

        }

        public Usuario(string email, string nombre, string apellido, string contra, string rol)
        {
            Email = new Email(email);
            NombreCompleto = new NombreCompleto(nombre, apellido);
            Contrasena = new Contrasena(contra);
            Rol = rol;
            EsValido();
        }

        public Usuario(int id, string email, string nombre, string apellido, string contra, string rol)
        {

            Id = id;
            Email = new Email(email);
            NombreCompleto = new NombreCompleto(nombre,apellido);
            Contrasena = new Contrasena(contra);
            Rol = rol;
            EsValido();
        }

        #endregion

        public void EsValido()
        {
            if (Id == null) throw new UsuarioNoValidoException("Error, id nulo");
            if (Email == null) throw new EmailNoValidoException("Error, email nulo");
            if (NombreCompleto == null) throw new NombreCompletoNoValidoException("Error, nombre y/o apellido nulos");
            if (Contrasena == null) throw new ContrasenaNoValidaException("Error, contrasena nula");
            if (Rol!="admin"||Rol!="encargado") throw new UsuarioNoValidoException("Error, rol inexistente");
        }

        public void ModificarDatos(Usuario obj)
        {
            if (obj == null) throw new ArgumentNullException("Los datos para modificar el usuario son invalidos");
            obj.EsValido();
            this.Email = obj.Email;
            this.NombreCompleto = obj.NombreCompleto;
            this.Contrasena.ContrasenaNoEncriptada = obj.Contrasena.ContrasenaNoEncriptada;
            this.Contrasena.ContrasenaEncriptada = EncriptarContraseña(obj.Contrasena.ContrasenaNoEncriptada);
            this.Rol = obj.Rol;
        }
        /// <summary>
        /// Metodo de encriptacion de contraseña mediante SHA256
        /// </summary>
        /// <param name="contraseña">String de contraseña a encriptar</param>
        /// <returns>String recibido encriptado</returns>
        public static string EncriptarContraseña(string contraseña)
        {
            using (SHA256 sha256 = SHA256.Create())
            {
                // Convertir la contraseña en una matriz de bytes
                byte[] contraseñaBytes = Encoding.UTF8.GetBytes(contraseña);

                // Calcular el hash de la contraseña
                byte[] hashBytes = sha256.ComputeHash(contraseñaBytes);

                // Convertir el hash en una cadena hexadecimal
                StringBuilder sb = new StringBuilder();
                foreach (byte b in hashBytes)
                {
                    sb.Append(b.ToString("x2"));
                }

                return sb.ToString();
            }
        }

    }
}

***********************************
Archivo: Parametro.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Entidades\ParametrosConfigurables\Parametro.cs
***********************************
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Libreria.LogicaNegocio.Entidades.ParametrosConfigurables
{
    public class Parametro
    {
        [Key]
        public string Nombre { get; set; }
        public string Valor { get; set; }
        public Parametro(string nombre, string valor)
        {
            if (string.IsNullOrEmpty(nombre) || string.IsNullOrEmpty(valor))
                throw new ArgumentException("Parámetros vacíos");
                Nombre = nombre;
            Valor = valor;
        }
    }
}

***********************************
Archivo: ArticuloNoValidoException.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Excepciones\Articulo\ArticuloNoValidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Excepciones.Articulo
{
    public class ArticuloNoValidoException : Exception
    {
        public ArticuloNoValidoException()
        {
        }

        public ArticuloNoValidoException(string? message) : base(message)
        {
        }

        public ArticuloNoValidoException(string? message, Exception? innerException) : base(message, innerException)
        {
        }
    }
}

***********************************
Archivo: ClienteNoValidoException.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Excepciones\Cliente\ClienteNoValidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Excepciones.Cliente
{
    public class ClienteNoValidoException : Exception
    {
        public ClienteNoValidoException()
        {
        }

        public ClienteNoValidoException(string? message) : base(message)
        {
        }

        public ClienteNoValidoException(string? message, Exception? innerException) : base(message, innerException)
        {
        }
    }
}

***********************************
Archivo: EmailNoValidoException.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Excepciones\Comun\EmailNoValidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Excepciones.Comun
{
    public class EmailNoValidoException:Exception
    {
        public EmailNoValidoException()
        {
        }

        public EmailNoValidoException(string? message) : base(message)
        {
        }

        public EmailNoValidoException(string? message, Exception? innerException) : base(message, innerException)
        {
        }
    }
}

***********************************
Archivo: NombreCompletoNoValidoException.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Excepciones\NombreCompleto\NombreCompletoNoValidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Excepciones.NombreCompleto
{
    public class NombreCompletoNoValidoException:Exception
    {
        public NombreCompletoNoValidoException()
        {
        }

        public NombreCompletoNoValidoException(string? message) : base(message)
        {
        }

        public NombreCompletoNoValidoException(string? message, Exception? innerException) : base(message, innerException)
        {
        }
    }
}

***********************************
Archivo: PedidoNoValidoException.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Excepciones\Pedido\PedidoNoValidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Excepciones.Pedido
{
    public class PedidoNoValidoException : Exception
    {
        public PedidoNoValidoException()
        {
        }

        public PedidoNoValidoException(string? message) : base(message)
        {
        }

        public PedidoNoValidoException(string? message, Exception? innerException) : base(message, innerException)
        {
        }
    }
}

***********************************
Archivo: TipoDeMovimientoNoValidoException.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Excepciones\TipoDeMovimiento\TipoDeMovimientoNoValidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Excepciones.TipoDeMovimiento
{
    public class TipoDeMovimientoNoValidoException:Exception
    {
        public TipoDeMovimientoNoValidoException()
        {
        }

        public TipoDeMovimientoNoValidoException(string? message) : base(message)
        {
        }

        public TipoDeMovimientoNoValidoException(string? message, Exception? innerException) : base(message, innerException)
        {
        }
    }
}

***********************************
Archivo: ContrasenaNoValidaException.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Excepciones\Usuario\ContrasenaNoValidaException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Excepciones.Usuario
{
    public class ContrasenaNoValidaException:Exception
    {
        public ContrasenaNoValidaException()
        {
        }

        public ContrasenaNoValidaException(string? message) : base(message)
        {
        }

        public ContrasenaNoValidaException(string? message, Exception? innerException) : base(message, innerException)
        {
        }
    }
}

***********************************
Archivo: UsuarioNoValidoException.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Excepciones\Usuario\UsuarioNoValidoException.cs
***********************************
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Excepciones.Usuario
{
    public class UsuarioNoValidoException:Exception
    {
        public UsuarioNoValidoException()
        {
        }

        public UsuarioNoValidoException(string? message) : base(message)
        {
        }

        public UsuarioNoValidoException(string? message, Exception? innerException) : base(message, innerException)
        {
        }
    }
}

***********************************
Archivo: UsuarioLoginDTO.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\Obligatoriop3.WebApi\DTOS\UsuariosDTO\UsuarioLoginDTO.cs
***********************************

namespace Obligatoriop3.WebApi.DTOS.UsuariosDTO
{
    public record UsuarioLoginDTO
    {
        public string Email { get; set; }
        public string Contrasena { get; set; }
    }
}

***********************************
Archivo: ArticuloAltaDto.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\Articulos\ArticuloAltaDto.cs
***********************************
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos
{
    public class ArticuloAltaDto
    {
        [Required]
        public string Nombre { get; set; }
        [Required]
        public string Descripcion { get; set; }
        [Required]
        public string Codigo { get; set; }
        [Required]
        public decimal Precio { get; set; }
        [Required]
        public int Stock { get; set; }     
    }
}

***********************************
Archivo: ArticuloListarDto.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\Articulos\ArticuloListarDto.cs
***********************************
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos
{
    public class ArticuloListarDto
    {
        [Required]
        public int Id { get; set; }
        [Required]
        public string Nombre { get; set; }
        [Required]
        public string Descripcion { get; set; }
        [Required]
        public string Codigo { get; set; }
        [Required]
        public decimal Precio { get; set; }
        [Required]
        public int Stock { get; set; }
    }
}

***********************************
Archivo: ArticulosPedidoDto.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\ArticulosPedido\ArticulosPedidoDto.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Articulos;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.ArticulosPedido
{
    public class ArticulosPedidoDto
    {
        [Required]
        public int PedidoId { get; set; }
        [Required]
        public ArticuloListarDto ArticuloListarDto { get; set; }
        [Required]
        public int Unidades { get; set; }
        [Required]
        public decimal PrecioUnitario { get; set; }
    }
}

***********************************
Archivo: ClienteListarDto.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\Clientes\ClienteListarDto.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.ValueObjects.Cliente;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes
{
    public class ClienteListarDto
    {
        [Required]
        public int Id { get; set; }
        [Required]
        public string RazonSocial { get; set; }
        [Required]
        public string RUT { get; set; }
        [Required]
        public string Calle { get; set; }
        [Required]
        public string Ciudad { get; set; }
        [Required]
        public int Numero { get; set; }
        [Required]
        public double Distancia { get; set; }
    }
}

***********************************
Archivo: MovimientoAltaDTO.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\MovimientosStock\MovimientoAltaDTO.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.MovimientosStock
{
    public class MovimientoStockAltaDTO
    {
        [Required]
        public int IdArticulo { get; set; }
        [Required]
        public int IdTipo { get; set; }
        [Required]
        public int Cantidad { get; set; }
        [Required]
        public string emailUsuario { get; set; }
    }
}

***********************************
Archivo: MovimientoCantidadDto.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\MovimientosStock\MovimientoCantidadDto.cs
***********************************
namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.MovimientosStock 
{ 
    public class MovimientoCantidadDto
    {
        public string Nombre { get; set; }
        public int Cantidad { get; set; }
    }
}

***********************************
Archivo: MovimientoListarAgrupadoDTO.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\MovimientosStock\MovimientoListarAgrupadoDTO.cs
***********************************
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.MovimientosStock
{
    public class MovimientoListarAgrupadoDTO
    {
        public string Ano { get; set; }
        public IEnumerable<MovimientoCantidadDto> MovimientoCantidad { get; set; }
        public int Total { get; set; }
    }
}

***********************************
Archivo: MovimientoListarDTO.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\MovimientosStock\MovimientoListarDTO.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.EntidadDeAutenticacion;
using ObligatorioP3.LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.MovimientosStock
{
    public class MovimientoListarDTO
    {
        [Required]
        public int Id { get; set; }
        [Required]
        public DateTime Fecha { get; set; }
        [Required]
        public int IdArticulo { get; set; }
        [Required]
        public int IdUsuario { get; set; }
        [Required]
        public int Cantidad { get; set; }
        [Required]
        public int IdTipoMovmiento { get; set; }
        [Required]
        public string NombreTipoMovimiento { get; set; }
        [Required]
        public bool Aumento { get; set; }
        [Required]
        public int Coeficiente { get; set; }
    }
}

***********************************
Archivo: PedidoAltaDto.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\Pedidos\PedidoAltaDto.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.AssosiationClasses;
using ObligatorioP3.LogicaNegocio.Entidades;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.ArticulosPedido;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos
{
    public class PedidoAltaDto
    {
        [Required]
        public DateTime FechaEntrega { get; set; }
        [Required]
        public ClienteListarDto ClienteDto { get; set; }
        [Required]
        public List<ArticulosPedidoDto> LineasDto;
    }
}

***********************************
Archivo: PedidoListarDto.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\Pedidos\PedidoListarDto.cs
***********************************
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.ArticulosPedido;
using ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Clientes;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Pedidos
{
    public class PedidoListarDto
    {
        [Required]
        public int Id { get; set; }
        [Required]
        public DateTime FechaEntrega { get; set; }
        [Required]
        public DateTime FechaEmision { get; set; }
        [Required]
        public ClienteListarDto ClienteDto { get; set; }
        [Required]
        public decimal PrecioFinal { get; set; }
        [Required]
        public bool Anulado {  get; set; }
    }
}

***********************************
Archivo: TipoDeMovimientoAltaDTO.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\TiposDeMovimiento\TipoDeMovimientoAltaDTO.cs
***********************************
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.TiposDeMovimiento
{
    public class TipoDeMovimientoAltaDTO
    {
        [Required]
        public int Id { get; set; }
        [Required]
        public string Nombre { get; set; }
        [Required]
        public bool Aumento { get; set; }
    }
}

***********************************
Archivo: TipoDeMovimientoListarDTO.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\TiposDeMovimiento\TipoDeMovimientoListarDTO.cs
***********************************
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.TiposDeMovimiento
{
    public class TipoDeMovimientoListarDTO
    {
        public int Id { get; set; }
        public string Nombre { get; set; }
        public bool Aumento { get; set; }
        public int Coeficiente { get; set; }
        
    }
}

***********************************
Archivo: TipoDeMovimientoModificacionDto.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\TiposDeMovimiento\TipoDeMovimientoModificacionDto.cs
***********************************
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.TiposDeMovimiento
{
    public class TipoDeMovimientoModificacionDto
    {
        [Required]
        public int Id { get; set; }
        [Required]
        public string Nombre { get; set; }
        [Required]
        public bool Aumento { get; set; }
    }
}

***********************************
Archivo: UsuarioAltaDto.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\Usuarios\UsuarioAltaDto.cs
***********************************
using ObligatorioP3.LogicaNegocio.Entidades.ValueObjects.Comun;
using ObligatorioP3.LogicaNegocio.Entidades.ValueObjects.Usuario;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios
{
    public class UsuarioAltaDto
    {
        [Required]
        public string Email { get; set; }
        [Required]
        public string Nombre { get; set; }
        [Required]
        public string Apellido { get; set; }
        [Required]
        public string Contrasena { get; set; }
        [Required]
        public string? ContrasenaEncriptada { get; set; }
        [Required]
        public string Rol { get; set; }
    }
}

***********************************
Archivo: UsuarioListarDto.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\Usuarios\UsuarioListarDto.cs
***********************************
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios
{
    public class UsuarioListarDto
    {
        [Required]
        public int Id { get; set; }
        [Required]
        public string Email { get; set; }
        [Required]
        public string Nombre { get; set; }
        [Required]
        public string Apellido { get; set; }
        [Required]
        public string Contrasena { get; set; }
        [Required]
        public string? ContrasenaEncriptada { get; set; }
        [Required]
        public string Rol { get; set; }
    }
}

***********************************
Archivo: UsuarioModificacionDto.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaAplicacion\DataTransferObjects\Dtos\Usuarios\UsuarioModificacionDto.cs
***********************************
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaAplicacion.DataTransferObjects.Dtos.Usuarios
{
    public class UsuarioModificacionDto
    {
        [Required]
        public int Id { get; set; }
        [Required]
        public string Email { get; set; }
        [Required]
        public string Nombre { get; set; }
        [Required]
        public string Apellido { get; set; }
        [Required]
        public string Contrasena { get; set; }
        [Required]
        public string ContrasenaEncriptada { get; set; }
        [Required]
        public string Rol { get; set; }
    }
}

***********************************
Archivo: Direccion.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Entidades\ValueObjects\Cliente\Direccion.cs
***********************************
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Entidades.ValueObjects.Cliente
{
    [ComplexType]
    public record Direccion
    {
        public string Calle { get; set; }
        public string Ciudad { get; set; }
        public int Numero { get; set; }
        public double Distancia { get; set; }

        public Direccion()
        {

        }
        public Direccion(string calle, string ciudad, int numero, double distancia)
        {
            Calle = calle;
            Ciudad = ciudad;
            Numero = numero;
            Distancia = distancia;
            EsValido();
        }

        public void EsValido()
        {
            if (Calle == null) throw new ArgumentNullException("Error, calle nula");
            if (Ciudad == null) throw new ArgumentNullException("Error, ciudad nula");
            if (Numero == null) throw new ArgumentNullException("Error, numero de local nulo");
            if (Distancia == null) throw new ArgumentNullException("Error, direccion nula");
        }
    }
}

***********************************
Archivo: Email.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Entidades\ValueObjects\Comun\Email.cs
***********************************
using ObligatorioP3.LogicaNegocio.Excepciones.Comun;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Entidades.ValueObjects.Comun
{
    [ComplexType]
    public record Email
    {
        public string ValorEmail { get; init; }

        public Email()
        {

        }
        public Email(string valorEmail)
        {
            if (valorEmail == null) throw new ArgumentNullException(nameof(valorEmail), "Error, email nulo");
            ValidarEmail(valorEmail);
            ValorEmail = valorEmail;
        }

        public static void ValidarEmail(string valorEmail)
        {
            if (valorEmail.Length < 6 || !valorEmail.Contains("@")|| valorEmail[0]=='@' || valorEmail[valorEmail.Length-1]=='@' || !valorEmail.Contains(".") || valorEmail[valorEmail.Length-1]=='.')
                throw new EmailNoValidoException("Email no válido. Largo mínimo 6, debe incluir un arroba y dominio");
        }

        public int CompareTo(Email other)
        {
            if (other == null)
                return 1;

            return string.Compare(this.ValorEmail, other.ValorEmail, StringComparison.OrdinalIgnoreCase);
        }
    }
}

***********************************
Archivo: Contrasena.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Entidades\ValueObjects\Usuario\Contrasena.cs
***********************************
using ObligatorioP3.LogicaNegocio.Excepciones.Usuario;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Runtime.CompilerServices;
using System.Text;
using System.Threading.Tasks;

namespace ObligatorioP3.LogicaNegocio.Entidades.ValueObjects.Usuario
{
    [ComplexType]
    public record Contrasena
    {
        public string ContrasenaNoEncriptada { get; set; }
        public string? ContrasenaEncriptada { get; set; }

        public Contrasena()
        {

        }
        public Contrasena(string contra)
        {
            if (contra == null) throw new ArgumentNullException("Error, contraseña nula");
            if (!ValidarContrasena(contra)) throw new ContrasenaNoValidaException("Error, contrasena invalida, largo mínimo 6 y may/min dígito y \\\".;,!\\\" -\"");
            ContrasenaNoEncriptada = contra;
        }
        public Contrasena(string contra, string contraEncriptada)
        {
            if (contra == null) throw new ArgumentNullException("Error, contraseña nula");
            if (!ValidarContrasena(contra)) throw new ContrasenaNoValidaException("Error, contrasena invalida, largo mínimo 6 y may/min dígito y \".;,!\" -");
            ContrasenaNoEncriptada = contra;
            ContrasenaEncriptada = contraEncriptada;
        }
        static bool ValidarContrasena(string contra)
        {
            bool contieneMin = false;
            bool contieneMay = false;
            bool contieneSigno = false;

            foreach (char c in contra)
            {
                if (char.IsUpper(c))
                {
                    contieneMay = true;
                }
                else if (char.IsLower(c))
                {
                    contieneMin = true;
                }
                else if (char.IsDigit(c) || char.IsPunctuation(c))
                {
                    contieneSigno = true;
                }
            }

            return contra.Length >= 6 && contieneMin && contieneMay && contieneSigno && contra.Any(char.IsDigit);
        }

    }
}

***********************************
Archivo: NombreCompleto.cs
Carpeta: C:\Users\gasva\Desktop\ObligatorioP3\Obligatorio2\Local\WEBAPI\ObligatorioP3.LogicaNegocio\Entidades\ValueObjects\Usuario\NombreCompleto.cs
***********************************
using ObligatorioP3.LogicaNegocio.Excepciones.NombreCompleto;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static System.Runtime.InteropServices.JavaScript.JSType;

namespace ObligatorioP3.LogicaNegocio.Entidades.ValueObjects.Usuario
{
    [ComplexType]
    public record NombreCompleto
    {
        public string Nombre { get; init; }
        public string Apellido { get; init; }

        public NombreCompleto()
        {

        }
        public NombreCompleto(string nombre, string apellido)
        {
            if (nombre == null || apellido == null)
                throw new NombreCompletoNoValidoException("El nombre y apellido del usuario no pueden ser nulos");
            if (!NombreValido(nombre))
                throw new NombreCompletoNoValidoException($"{nombre} no es un nombre válido ");
            if (!NombreValido(apellido))
                throw new NombreCompletoNoValidoException($"{apellido} no es un apellido válido ");
 
            Nombre = FormatearNombre(nombre);
            Apellido = FormatearNombre(apellido);
        }

        static bool NombreValido(string Nombre)
        {
            bool sinCaracteres = true;
            char[] caracteresNoPermitidos = { '-', '_', '.', ',', ';', ':', '!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '[', ']', '{', '}', '|', '\\', '/', '<', '>', '?', '~', '`', '\'', '\"', '+', '=', ' ', '\t', '\n', '\r' };


            foreach (char c in caracteresNoPermitidos)
            {
                if (Nombre.Contains(c))
                {
                    sinCaracteres = false;
                }
            }


            return Nombre.Length >= 2 && !Nombre.Any(c => char.IsDigit(c)) && sinCaracteres;
        }

        static string FormatearNombre(string nombre)
        {
            string ret = "";
            nombre = nombre.ToLower();
            ret = nombre[0].ToString().ToUpper();
            for(int i = 1; i < nombre.Length; i++)
            {
                ret += nombre[i];
            }

            return ret;
        }
    }
}
